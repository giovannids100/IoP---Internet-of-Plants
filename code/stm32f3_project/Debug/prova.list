
prova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004670  08004670  00005670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a8  080046a8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080046a8  080046a8  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080046a8  080046a8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a8  080046a8  000056a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          0000013c  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be32  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c4a  00000000  00000000  00011e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  00013ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000727  00000000  00000000  00014400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d166  00000000  00000000  00014b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0b1  00000000  00000000  00031c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2396  00000000  00000000  0003ed3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f10d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002584  00000000  00000000  000f1118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000f369c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004658 	.word	0x08004658

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004658 	.word	0x08004658

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 facb 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f843 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f957 	bl	8000488 <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 f937 	bl	800044c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80001de:	f000 f905 	bl	80003ec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80001e2:	f000 f893 	bl	800030c <MX_ADC1_Init>

  uint32_t value_adc;
  uint8_t humidity_percent;


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80001e6:	2100      	movs	r1, #0
 80001e8:	4819      	ldr	r0, [pc, #100]	@ (8000250 <main+0x88>)
 80001ea:	f000 fec3 	bl	8000f74 <HAL_ADCEx_Calibration_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Nel loop principale dello STM32
	  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2201      	movs	r2, #1
 80001f2:	4619      	mov	r1, r3
 80001f4:	4816      	ldr	r0, [pc, #88]	@ (8000250 <main+0x88>)
 80001f6:	f000 fd3f 	bl	8000c78 <HAL_ADC_Start_DMA>
	  HAL_Delay(10);
 80001fa:	200a      	movs	r0, #10
 80001fc:	f000 fb1a 	bl	8000834 <HAL_Delay>
	  HAL_ADC_Stop_DMA(&hadc1);
 8000200:	4813      	ldr	r0, [pc, #76]	@ (8000250 <main+0x88>)
 8000202:	f000 fe55 	bl	8000eb0 <HAL_ADC_Stop_DMA>

	  // Converti ADC in percentuale (invertita: 4095=secco=0%, 0=bagnato=100%)
	  if (value_adc >= 4095) {
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800020c:	4293      	cmp	r3, r2
 800020e:	d902      	bls.n	8000216 <main+0x4e>
	      humidity_percent = 0;  // Completamente secco
 8000210:	2300      	movs	r3, #0
 8000212:	70fb      	strb	r3, [r7, #3]
 8000214:	e00f      	b.n	8000236 <main+0x6e>
	  } else {
	      humidity_percent = (uint8_t)(100 - ((value_adc * 100) / 4095));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2264      	movs	r2, #100	@ 0x64
 800021a:	fb03 f202 	mul.w	r2, r3, r2
 800021e:	4b0d      	ldr	r3, [pc, #52]	@ (8000254 <main+0x8c>)
 8000220:	fba3 1302 	umull	r1, r3, r3, r2
 8000224:	1ad2      	subs	r2, r2, r3
 8000226:	0852      	lsrs	r2, r2, #1
 8000228:	4413      	add	r3, r2
 800022a:	0adb      	lsrs	r3, r3, #11
 800022c:	b2db      	uxtb	r3, r3
 800022e:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000232:	b2db      	uxtb	r3, r3
 8000234:	70fb      	strb	r3, [r7, #3]
	  }

	  // Invia il valore in percentuale
	  HAL_UART_Transmit(&huart1, &humidity_percent, 1, HAL_MAX_DELAY);
 8000236:	1cf9      	adds	r1, r7, #3
 8000238:	f04f 33ff 	mov.w	r3, #4294967295
 800023c:	2201      	movs	r2, #1
 800023e:	4806      	ldr	r0, [pc, #24]	@ (8000258 <main+0x90>)
 8000240:	f003 fd64 	bl	8003d0c <HAL_UART_Transmit>
	  HAL_Delay(5000);
 8000244:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000248:	f000 faf4 	bl	8000834 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
 800024c:	e7cf      	b.n	80001ee <main+0x26>
 800024e:	bf00      	nop
 8000250:	20000028 	.word	0x20000028
 8000254:	00100101 	.word	0x00100101
 8000258:	200000bc 	.word	0x200000bc

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b09e      	sub	sp, #120	@ 0x78
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000266:	2228      	movs	r2, #40	@ 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f004 f9c7 	bl	80045fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	463b      	mov	r3, r7
 8000282:	223c      	movs	r2, #60	@ 0x3c
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f004 f9b9 	bl	80045fe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	2302      	movs	r3, #2
 800028e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	2310      	movs	r3, #16
 8000296:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	2302      	movs	r3, #2
 800029a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029c:	2300      	movs	r3, #0
 800029e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002a0:	2300      	movs	r3, #0
 80002a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 f913 	bl	80024d4 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002b4:	f000 f90c 	bl	80004d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002bc:	2300      	movs	r3, #0
 80002be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f003 f90c 	bl	80034f0 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80002de:	f000 f8f7 	bl	80004d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 80002e2:	2381      	movs	r3, #129	@ 0x81
 80002e4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f0:	463b      	mov	r3, r7
 80002f2:	4618      	mov	r0, r3
 80002f4:	f003 fb0e 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002fe:	f000 f8e7 	bl	80004d0 <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3778      	adds	r7, #120	@ 0x78
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08a      	sub	sp, #40	@ 0x28
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000312:	f107 031c 	add.w	r3, r7, #28
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
 800032c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800032e:	4b2e      	ldr	r3, [pc, #184]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 8000330:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000334:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000336:	4b2c      	ldr	r3, [pc, #176]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800033c:	4b2a      	ldr	r3, [pc, #168]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000342:	4b29      	ldr	r3, [pc, #164]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000348:	4b27      	ldr	r3, [pc, #156]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 800034a:	2200      	movs	r2, #0
 800034c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800034e:	4b26      	ldr	r3, [pc, #152]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000356:	4b24      	ldr	r3, [pc, #144]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 8000358:	2200      	movs	r2, #0
 800035a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800035c:	4b22      	ldr	r3, [pc, #136]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 800035e:	2201      	movs	r2, #1
 8000360:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000362:	4b21      	ldr	r3, [pc, #132]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000368:	4b1f      	ldr	r3, [pc, #124]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 800036a:	2201      	movs	r2, #1
 800036c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800036e:	4b1e      	ldr	r3, [pc, #120]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 8000370:	2200      	movs	r2, #0
 8000372:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000376:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 8000378:	2204      	movs	r2, #4
 800037a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037c:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 800037e:	2200      	movs	r2, #0
 8000380:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000382:	4b19      	ldr	r3, [pc, #100]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 8000384:	2201      	movs	r2, #1
 8000386:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000388:	4817      	ldr	r0, [pc, #92]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 800038a:	f000 fa95 	bl	80008b8 <HAL_ADC_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000394:	f000 f89c 	bl	80004d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000398:	2300      	movs	r3, #0
 800039a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800039c:	f107 031c 	add.w	r3, r7, #28
 80003a0:	4619      	mov	r1, r3
 80003a2:	4811      	ldr	r0, [pc, #68]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 80003a4:	f001 f942 	bl	800162c <HAL_ADCEx_MultiModeConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003ae:	f000 f88f 	bl	80004d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003b2:	2301      	movs	r3, #1
 80003b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80003be:	2305      	movs	r3, #5
 80003c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	4619      	mov	r1, r3
 80003ce:	4806      	ldr	r0, [pc, #24]	@ (80003e8 <MX_ADC1_Init+0xdc>)
 80003d0:	f000 fe42 	bl	8001058 <HAL_ADC_ConfigChannel>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003da:	f000 f879 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	3728      	adds	r7, #40	@ 0x28
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000028 	.word	0x20000028

080003ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f0:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 80003f2:	4a15      	ldr	r2, [pc, #84]	@ (8000448 <MX_USART1_UART_Init+0x5c>)
 80003f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003f6:	4b13      	ldr	r3, [pc, #76]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 80003f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000422:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042e:	4805      	ldr	r0, [pc, #20]	@ (8000444 <MX_USART1_UART_Init+0x58>)
 8000430:	f003 fc1e 	bl	8003c70 <HAL_UART_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800043a:	f000 f849 	bl	80004d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	200000bc 	.word	0x200000bc
 8000448:	40013800 	.word	0x40013800

0800044c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <MX_DMA_Init+0x38>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a0b      	ldr	r2, [pc, #44]	@ (8000484 <MX_DMA_Init+0x38>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <MX_DMA_Init+0x38>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	2100      	movs	r1, #0
 800046e:	200b      	movs	r0, #11
 8000470:	f001 fc8f 	bl	8001d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000474:	200b      	movs	r0, #11
 8000476:	f001 fca8 	bl	8001dca <HAL_NVIC_EnableIRQ>

}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <MX_GPIO_Init+0x44>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a0e      	ldr	r2, [pc, #56]	@ (80004cc <MX_GPIO_Init+0x44>)
 8000494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_GPIO_Init+0x44>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_GPIO_Init+0x44>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a08      	ldr	r2, [pc, #32]	@ (80004cc <MX_GPIO_Init+0x44>)
 80004ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_GPIO_Init+0x44>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <Error_Handler+0x8>

080004dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <HAL_MspInit+0x44>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <HAL_MspInit+0x44>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <HAL_MspInit+0x44>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fa:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <HAL_MspInit+0x44>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <HAL_MspInit+0x44>)
 8000500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000504:	61d3      	str	r3, [r2, #28]
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <HAL_MspInit+0x44>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	@ 0x28
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000544:	d14c      	bne.n	80005e0 <HAL_ADC_MspInit+0xbc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000546:	4b28      	ldr	r3, [pc, #160]	@ (80005e8 <HAL_ADC_MspInit+0xc4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a27      	ldr	r2, [pc, #156]	@ (80005e8 <HAL_ADC_MspInit+0xc4>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <HAL_ADC_MspInit+0xc4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <HAL_ADC_MspInit+0xc4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <HAL_ADC_MspInit+0xc4>)
 8000564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <HAL_ADC_MspInit+0xc4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000576:	2301      	movs	r3, #1
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057a:	2303      	movs	r3, #3
 800057c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058c:	f001 fe28 	bl	80021e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000590:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 8000592:	4a17      	ldr	r2, [pc, #92]	@ (80005f0 <HAL_ADC_MspInit+0xcc>)
 8000594:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000596:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800059c:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005a2:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a8:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 80005aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005b0:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 80005b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 80005ba:	2220      	movs	r2, #32
 80005bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005c4:	4809      	ldr	r0, [pc, #36]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 80005c6:	f001 fc1a 	bl	8001dfe <HAL_DMA_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80005d0:	f7ff ff7e 	bl	80004d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a05      	ldr	r2, [pc, #20]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 80005d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80005da:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <HAL_ADC_MspInit+0xc8>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005e0:	bf00      	nop
 80005e2:	3728      	adds	r7, #40	@ 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	20000078 	.word	0x20000078
 80005f0:	40020008 	.word	0x40020008

080005f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	@ 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <HAL_UART_MspInit+0x7c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d127      	bne.n	8000666 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <HAL_UART_MspInit+0x80>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <HAL_UART_MspInit+0x80>)
 800061c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <HAL_UART_MspInit+0x80>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <HAL_UART_MspInit+0x80>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a10      	ldr	r2, [pc, #64]	@ (8000674 <HAL_UART_MspInit+0x80>)
 8000634:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <HAL_UART_MspInit+0x80>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000646:	2330      	movs	r3, #48	@ 0x30
 8000648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000652:	2303      	movs	r3, #3
 8000654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000656:	2307      	movs	r3, #7
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <HAL_UART_MspInit+0x84>)
 8000662:	f001 fdbd 	bl	80021e0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	@ 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40013800 	.word	0x40013800
 8000674:	40021000 	.word	0x40021000
 8000678:	48000800 	.word	0x48000800

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <NMI_Handler+0x4>

08000684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <MemManage_Handler+0x4>

08000694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d2:	f000 f88f 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006e0:	4802      	ldr	r0, [pc, #8]	@ (80006ec <DMA1_Channel1_IRQHandler+0x10>)
 80006e2:	f001 fc70 	bl	8001fc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000078 	.word	0x20000078

080006f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <SystemInit+0x20>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006fa:	4a05      	ldr	r2, [pc, #20]	@ (8000710 <SystemInit+0x20>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800074c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff ffea 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <LoopForever+0x6>)
  ldr r1, =_edata
 800071e:	490d      	ldr	r1, [pc, #52]	@ (8000754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000720:	4a0d      	ldr	r2, [pc, #52]	@ (8000758 <LoopForever+0xe>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000734:	4c0a      	ldr	r4, [pc, #40]	@ (8000760 <LoopForever+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f003 ff65 	bl	8004610 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000746:	f7ff fd3f 	bl	80001c8 <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800074c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000758:	080046b0 	.word	0x080046b0
  ldr r2, =_sbss
 800075c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000760:	20000148 	.word	0x20000148

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>
	...

08000768 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f001 faff 	bl	8001d7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff feaa 	bl	80004dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fb17 	bl	8001de6 <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f001 fadf 	bl	8001d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	@ (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008
 8000818:	20000144 	.word	0x20000144

0800081c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000144 	.word	0x20000144

08000834 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800083c:	f7ff ffee 	bl	800081c <HAL_GetTick>
 8000840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800084c:	d005      	beq.n	800085a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084e:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <HAL_Delay+0x44>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800085a:	bf00      	nop
 800085c:	f7ff ffde 	bl	800081c <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8f7      	bhi.n	800085c <HAL_Delay+0x28>
  {
  }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008

0800087c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09a      	sub	sp, #104	@ 0x68
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e1c9      	b.n	8000c6c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d176      	bne.n	80009d8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d152      	bne.n	8000998 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2200      	movs	r2, #0
 8000908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fe09 	bl	8000524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091c:	2b00      	cmp	r3, #0
 800091e:	d13b      	bne.n	8000998 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f001 f83f 	bl	80019a4 <ADC_Disable>
 8000926:	4603      	mov	r3, r0
 8000928:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	f003 0310 	and.w	r3, r3, #16
 8000934:	2b00      	cmp	r3, #0
 8000936:	d12f      	bne.n	8000998 <HAL_ADC_Init+0xe0>
 8000938:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800093c:	2b00      	cmp	r3, #0
 800093e:	d12b      	bne.n	8000998 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000948:	f023 0302 	bic.w	r3, r3, #2
 800094c:	f043 0202 	orr.w	r2, r3, #2
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000962:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000972:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000974:	4b86      	ldr	r3, [pc, #536]	@ (8000b90 <HAL_ADC_Init+0x2d8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a86      	ldr	r2, [pc, #536]	@ (8000b94 <HAL_ADC_Init+0x2dc>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	0c9a      	lsrs	r2, r3, #18
 8000980:	4613      	mov	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800098a:	e002      	b.n	8000992 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	3b01      	subs	r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1f9      	bne.n	800098c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d007      	beq.n	80009b6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80009b4:	d110      	bne.n	80009d8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f023 0312 	bic.w	r3, r3, #18
 80009be:	f043 0210 	orr.w	r2, r3, #16
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f043 0201 	orr.w	r2, r3, #1
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f040 8136 	bne.w	8000c52 <HAL_ADC_Init+0x39a>
 80009e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 8131 	bne.w	8000c52 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f040 8129 	bne.w	8000c52 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000a08:	f043 0202 	orr.w	r2, r3, #2
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a18:	d004      	beq.n	8000a24 <HAL_ADC_Init+0x16c>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8000b98 <HAL_ADC_Init+0x2e0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d101      	bne.n	8000a28 <HAL_ADC_Init+0x170>
 8000a24:	4b5d      	ldr	r3, [pc, #372]	@ (8000b9c <HAL_ADC_Init+0x2e4>)
 8000a26:	e000      	b.n	8000a2a <HAL_ADC_Init+0x172>
 8000a28:	4b5d      	ldr	r3, [pc, #372]	@ (8000ba0 <HAL_ADC_Init+0x2e8>)
 8000a2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a34:	d102      	bne.n	8000a3c <HAL_ADC_Init+0x184>
 8000a36:	4b58      	ldr	r3, [pc, #352]	@ (8000b98 <HAL_ADC_Init+0x2e0>)
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	e01a      	b.n	8000a72 <HAL_ADC_Init+0x1ba>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a55      	ldr	r2, [pc, #340]	@ (8000b98 <HAL_ADC_Init+0x2e0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d103      	bne.n	8000a4e <HAL_ADC_Init+0x196>
 8000a46:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	e011      	b.n	8000a72 <HAL_ADC_Init+0x1ba>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a54      	ldr	r2, [pc, #336]	@ (8000ba4 <HAL_ADC_Init+0x2ec>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d102      	bne.n	8000a5e <HAL_ADC_Init+0x1a6>
 8000a58:	4b53      	ldr	r3, [pc, #332]	@ (8000ba8 <HAL_ADC_Init+0x2f0>)
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	e009      	b.n	8000a72 <HAL_ADC_Init+0x1ba>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a51      	ldr	r2, [pc, #324]	@ (8000ba8 <HAL_ADC_Init+0x2f0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d102      	bne.n	8000a6e <HAL_ADC_Init+0x1b6>
 8000a68:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba4 <HAL_ADC_Init+0x2ec>)
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e001      	b.n	8000a72 <HAL_ADC_Init+0x1ba>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d108      	bne.n	8000a92 <HAL_ADC_Init+0x1da>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d101      	bne.n	8000a92 <HAL_ADC_Init+0x1da>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <HAL_ADC_Init+0x1dc>
 8000a92:	2300      	movs	r3, #0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11c      	bne.n	8000ad2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a98:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d010      	beq.n	8000ac0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d107      	bne.n	8000aba <HAL_ADC_Init+0x202>
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d101      	bne.n	8000aba <HAL_ADC_Init+0x202>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <HAL_ADC_Init+0x204>
 8000aba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d108      	bne.n	8000ad2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	431a      	orrs	r2, r3
 8000ace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ad0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7e5b      	ldrb	r3, [r3, #25]
 8000ad6:	035b      	lsls	r3, r3, #13
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000adc:	2a01      	cmp	r2, #1
 8000ade:	d002      	beq.n	8000ae6 <HAL_ADC_Init+0x22e>
 8000ae0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ae4:	e000      	b.n	8000ae8 <HAL_ADC_Init+0x230>
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	431a      	orrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000af8:	4313      	orrs	r3, r2
 8000afa:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d11b      	bne.n	8000b3e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7e5b      	ldrb	r3, [r3, #25]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d109      	bne.n	8000b22 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	3b01      	subs	r3, #1
 8000b14:	045a      	lsls	r2, r3, #17
 8000b16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000b20:	e00d      	b.n	8000b3e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000b2a:	f043 0220 	orr.w	r2, r3, #32
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f043 0201 	orr.w	r2, r3, #1
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d03a      	beq.n	8000bbc <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a16      	ldr	r2, [pc, #88]	@ (8000ba4 <HAL_ADC_Init+0x2ec>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d004      	beq.n	8000b5a <HAL_ADC_Init+0x2a2>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <HAL_ADC_Init+0x2f0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d128      	bne.n	8000bac <HAL_ADC_Init+0x2f4>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000b62:	d012      	beq.n	8000b8a <HAL_ADC_Init+0x2d2>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b6c:	d00a      	beq.n	8000b84 <HAL_ADC_Init+0x2cc>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b72:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000b76:	d002      	beq.n	8000b7e <HAL_ADC_Init+0x2c6>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b7c:	e018      	b.n	8000bb0 <HAL_ADC_Init+0x2f8>
 8000b7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b82:	e015      	b.n	8000bb0 <HAL_ADC_Init+0x2f8>
 8000b84:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000b88:	e012      	b.n	8000bb0 <HAL_ADC_Init+0x2f8>
 8000b8a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000b8e:	e00f      	b.n	8000bb0 <HAL_ADC_Init+0x2f8>
 8000b90:	20000000 	.word	0x20000000
 8000b94:	431bde83 	.word	0x431bde83
 8000b98:	50000100 	.word	0x50000100
 8000b9c:	50000300 	.word	0x50000300
 8000ba0:	50000700 	.word	0x50000700
 8000ba4:	50000400 	.word	0x50000400
 8000ba8:	50000500 	.word	0x50000500
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d114      	bne.n	8000bf4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	6812      	ldr	r2, [r2, #0]
 8000bd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bd8:	f023 0302 	bic.w	r3, r3, #2
 8000bdc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7e1b      	ldrb	r3, [r3, #24]
 8000be2:	039a      	lsls	r2, r3, #14
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4313      	orrs	r3, r2
 8000bee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <HAL_ADC_Init+0x3bc>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	6812      	ldr	r2, [r2, #0]
 8000c02:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000c04:	430b      	orrs	r3, r1
 8000c06:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d10c      	bne.n	8000c2a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f023 010f 	bic.w	r1, r3, #15
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c28:	e007      	b.n	8000c3a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 020f 	bic.w	r2, r2, #15
 8000c38:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f023 0303 	bic.w	r3, r3, #3
 8000c48:	f043 0201 	orr.w	r2, r3, #1
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c50:	e00a      	b.n	8000c68 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f023 0312 	bic.w	r3, r3, #18
 8000c5a:	f043 0210 	orr.w	r2, r3, #16
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c62:	2301      	movs	r3, #1
 8000c64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3768      	adds	r7, #104	@ 0x68
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	fff0c007 	.word	0xfff0c007

08000c78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 80f7 	bne.w	8000e86 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d101      	bne.n	8000ca6 <HAL_ADC_Start_DMA+0x2e>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e0f2      	b.n	8000e8c <HAL_ADC_Start_DMA+0x214>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000cb6:	d004      	beq.n	8000cc2 <HAL_ADC_Start_DMA+0x4a>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a75      	ldr	r2, [pc, #468]	@ (8000e94 <HAL_ADC_Start_DMA+0x21c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d109      	bne.n	8000cd6 <HAL_ADC_Start_DMA+0x5e>
 8000cc2:	4b75      	ldr	r3, [pc, #468]	@ (8000e98 <HAL_ADC_Start_DMA+0x220>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	bf0c      	ite	eq
 8000cce:	2301      	moveq	r3, #1
 8000cd0:	2300      	movne	r3, #0
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	e008      	b.n	8000ce8 <HAL_ADC_Start_DMA+0x70>
 8000cd6:	4b71      	ldr	r3, [pc, #452]	@ (8000e9c <HAL_ADC_Start_DMA+0x224>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf0c      	ite	eq
 8000ce2:	2301      	moveq	r3, #1
 8000ce4:	2300      	movne	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 80c5 	beq.w	8000e78 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f000 fdf4 	bl	80018dc <ADC_Enable>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 80b7 	bne.w	8000e6e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d08:	f023 0301 	bic.w	r3, r3, #1
 8000d0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d1c:	d004      	beq.n	8000d28 <HAL_ADC_Start_DMA+0xb0>
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a5c      	ldr	r2, [pc, #368]	@ (8000e94 <HAL_ADC_Start_DMA+0x21c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d106      	bne.n	8000d36 <HAL_ADC_Start_DMA+0xbe>
 8000d28:	4b5b      	ldr	r3, [pc, #364]	@ (8000e98 <HAL_ADC_Start_DMA+0x220>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f003 031f 	and.w	r3, r3, #31
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d010      	beq.n	8000d56 <HAL_ADC_Start_DMA+0xde>
 8000d34:	e005      	b.n	8000d42 <HAL_ADC_Start_DMA+0xca>
 8000d36:	4b59      	ldr	r3, [pc, #356]	@ (8000e9c <HAL_ADC_Start_DMA+0x224>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d009      	beq.n	8000d56 <HAL_ADC_Start_DMA+0xde>
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d4a:	d004      	beq.n	8000d56 <HAL_ADC_Start_DMA+0xde>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a53      	ldr	r2, [pc, #332]	@ (8000ea0 <HAL_ADC_Start_DMA+0x228>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d115      	bne.n	8000d82 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d036      	beq.n	8000dde <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d80:	e02d      	b.n	8000dde <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d96:	d004      	beq.n	8000da2 <HAL_ADC_Start_DMA+0x12a>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a3d      	ldr	r2, [pc, #244]	@ (8000e94 <HAL_ADC_Start_DMA+0x21c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10a      	bne.n	8000db8 <HAL_ADC_Start_DMA+0x140>
 8000da2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bf14      	ite	ne
 8000db0:	2301      	movne	r3, #1
 8000db2:	2300      	moveq	r3, #0
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	e008      	b.n	8000dca <HAL_ADC_Start_DMA+0x152>
 8000db8:	4b39      	ldr	r3, [pc, #228]	@ (8000ea0 <HAL_ADC_Start_DMA+0x228>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf14      	ite	ne
 8000dc4:	2301      	movne	r3, #1
 8000dc6:	2300      	moveq	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d007      	beq.n	8000dde <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dd6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000dea:	d106      	bne.n	8000dfa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df0:	f023 0206 	bic.w	r2, r3, #6
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	645a      	str	r2, [r3, #68]	@ 0x44
 8000df8:	e002      	b.n	8000e00 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e0c:	4a25      	ldr	r2, [pc, #148]	@ (8000ea4 <HAL_ADC_Start_DMA+0x22c>)
 8000e0e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e14:	4a24      	ldr	r2, [pc, #144]	@ (8000ea8 <HAL_ADC_Start_DMA+0x230>)
 8000e16:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e1c:	4a23      	ldr	r2, [pc, #140]	@ (8000eac <HAL_ADC_Start_DMA+0x234>)
 8000e1e:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	221c      	movs	r2, #28
 8000e26:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0210 	orr.w	r2, r2, #16
 8000e36:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3340      	adds	r3, #64	@ 0x40
 8000e52:	4619      	mov	r1, r3
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f001 f818 	bl	8001e8c <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0204 	orr.w	r2, r2, #4
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	e00d      	b.n	8000e8a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000e76:	e008      	b.n	8000e8a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000e84:	e001      	b.n	8000e8a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e86:	2302      	movs	r3, #2
 8000e88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	50000100 	.word	0x50000100
 8000e98:	50000300 	.word	0x50000300
 8000e9c:	50000700 	.word	0x50000700
 8000ea0:	50000400 	.word	0x50000400
 8000ea4:	08001811 	.word	0x08001811
 8000ea8:	0800188b 	.word	0x0800188b
 8000eac:	080018a7 	.word	0x080018a7

08000eb0 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_Stop_DMA+0x1a>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e050      	b.n	8000f6c <HAL_ADC_Stop_DMA+0xbc>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8000ed2:	216c      	movs	r1, #108	@ 0x6c
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f000 fdcb 	bl	8001a70 <ADC_ConversionStop>
 8000eda:	4603      	mov	r3, r0
 8000edc:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d13e      	bne.n	8000f62 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ef8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d10f      	bne.n	8000f20 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 f820 	bl	8001f4a <HAL_DMA_Abort>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0210 	bic.w	r2, r2, #16
 8000f2e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d105      	bne.n	8000f42 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 fd34 	bl	80019a4 <ADC_Disable>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e002      	b.n	8000f48 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fd2e 	bl	80019a4 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d109      	bne.n	8000f62 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f56:	f023 0301 	bic.w	r3, r3, #1
 8000f5a:	f043 0201 	orr.w	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d101      	bne.n	8000f90 <HAL_ADCEx_Calibration_Start+0x1c>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e05f      	b.n	8001050 <HAL_ADCEx_Calibration_Start+0xdc>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fd03 	bl	80019a4 <ADC_Disable>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d14e      	bne.n	8001046 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8000fbc:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d107      	bne.n	8000fd4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000fd2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000fe2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000fe4:	f7ff fc1a 	bl	800081c <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000fea:	e01c      	b.n	8001026 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000fec:	f7ff fc16 	bl	800081c <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b0a      	cmp	r3, #10
 8000ff8:	d915      	bls.n	8001026 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001004:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001008:	d10d      	bne.n	8001026 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f023 0312 	bic.w	r3, r3, #18
 8001012:	f043 0210 	orr.w	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e014      	b.n	8001050 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001030:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001034:	d0da      	beq.n	8000fec <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001058:	b480      	push	{r7}
 800105a:	b09b      	sub	sp, #108	@ 0x6c
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_ADC_ConfigChannel+0x22>
 8001076:	2302      	movs	r3, #2
 8001078:	e2c8      	b.n	800160c <HAL_ADC_ConfigChannel+0x5b4>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	f040 82ac 	bne.w	80015ea <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b04      	cmp	r3, #4
 8001098:	d81c      	bhi.n	80010d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	461a      	mov	r2, r3
 80010ae:	231f      	movs	r3, #31
 80010b0:	4093      	lsls	r3, r2
 80010b2:	43db      	mvns	r3, r3
 80010b4:	4019      	ands	r1, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010d2:	e063      	b.n	800119c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b09      	cmp	r3, #9
 80010da:	d81e      	bhi.n	800111a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	3b1e      	subs	r3, #30
 80010f0:	221f      	movs	r2, #31
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	4019      	ands	r1, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	3b1e      	subs	r3, #30
 800110c:	fa00 f203 	lsl.w	r2, r0, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	635a      	str	r2, [r3, #52]	@ 0x34
 8001118:	e040      	b.n	800119c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b0e      	cmp	r3, #14
 8001120:	d81e      	bhi.n	8001160 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	3b3c      	subs	r3, #60	@ 0x3c
 8001136:	221f      	movs	r2, #31
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	4019      	ands	r1, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	3b3c      	subs	r3, #60	@ 0x3c
 8001152:	fa00 f203 	lsl.w	r2, r0, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	639a      	str	r2, [r3, #56]	@ 0x38
 800115e:	e01d      	b.n	800119c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	3b5a      	subs	r3, #90	@ 0x5a
 8001174:	221f      	movs	r2, #31
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	4019      	ands	r1, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	3b5a      	subs	r3, #90	@ 0x5a
 8001190:	fa00 f203 	lsl.w	r2, r0, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 80e5 	bne.w	8001376 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	d91c      	bls.n	80011ee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6999      	ldr	r1, [r3, #24]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	3b1e      	subs	r3, #30
 80011c6:	2207      	movs	r2, #7
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4019      	ands	r1, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	6898      	ldr	r0, [r3, #8]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	3b1e      	subs	r3, #30
 80011e0:	fa00 f203 	lsl.w	r2, r0, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	619a      	str	r2, [r3, #24]
 80011ec:	e019      	b.n	8001222 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6959      	ldr	r1, [r3, #20]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	2207      	movs	r2, #7
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	4019      	ands	r1, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	6898      	ldr	r0, [r3, #8]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	fa00 f203 	lsl.w	r2, r0, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	3b01      	subs	r3, #1
 8001240:	2b03      	cmp	r3, #3
 8001242:	d84f      	bhi.n	80012e4 <HAL_ADC_ConfigChannel+0x28c>
 8001244:	a201      	add	r2, pc, #4	@ (adr r2, 800124c <HAL_ADC_ConfigChannel+0x1f4>)
 8001246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124a:	bf00      	nop
 800124c:	0800125d 	.word	0x0800125d
 8001250:	0800127f 	.word	0x0800127f
 8001254:	080012a1 	.word	0x080012a1
 8001258:	080012c3 	.word	0x080012c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001262:	4b99      	ldr	r3, [pc, #612]	@ (80014c8 <HAL_ADC_ConfigChannel+0x470>)
 8001264:	4013      	ands	r3, r2
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	0691      	lsls	r1, r2, #26
 800126c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800126e:	430a      	orrs	r2, r1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800127a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800127c:	e07b      	b.n	8001376 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001284:	4b90      	ldr	r3, [pc, #576]	@ (80014c8 <HAL_ADC_ConfigChannel+0x470>)
 8001286:	4013      	ands	r3, r2
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	0691      	lsls	r1, r2, #26
 800128e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001290:	430a      	orrs	r2, r1
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800129c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800129e:	e06a      	b.n	8001376 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80012a6:	4b88      	ldr	r3, [pc, #544]	@ (80014c8 <HAL_ADC_ConfigChannel+0x470>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	0691      	lsls	r1, r2, #26
 80012b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012b2:	430a      	orrs	r2, r1
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012be:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012c0:	e059      	b.n	8001376 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80012c8:	4b7f      	ldr	r3, [pc, #508]	@ (80014c8 <HAL_ADC_ConfigChannel+0x470>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	0691      	lsls	r1, r2, #26
 80012d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012d4:	430a      	orrs	r2, r1
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012e0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012e2:	e048      	b.n	8001376 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	069b      	lsls	r3, r3, #26
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d107      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001306:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800130e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	069b      	lsls	r3, r3, #26
 8001318:	429a      	cmp	r2, r3
 800131a:	d107      	bne.n	800132c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800132a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001332:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	069b      	lsls	r3, r3, #26
 800133c:	429a      	cmp	r2, r3
 800133e:	d107      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800134e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001356:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	069b      	lsls	r3, r3, #26
 8001360:	429a      	cmp	r2, r3
 8001362:	d107      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001372:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001374:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d108      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x33e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x33e>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_ADC_ConfigChannel+0x340>
 8001396:	2300      	movs	r3, #0
 8001398:	2b00      	cmp	r3, #0
 800139a:	f040 8131 	bne.w	8001600 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d00f      	beq.n	80013c6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43da      	mvns	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	400a      	ands	r2, r1
 80013c0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80013c4:	e049      	b.n	800145a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2201      	movs	r2, #1
 80013d4:	409a      	lsls	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b09      	cmp	r3, #9
 80013e6:	d91c      	bls.n	8001422 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6999      	ldr	r1, [r3, #24]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	3b1b      	subs	r3, #27
 80013fa:	2207      	movs	r2, #7
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	4019      	ands	r1, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	6898      	ldr	r0, [r3, #8]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	3b1b      	subs	r3, #27
 8001414:	fa00 f203 	lsl.w	r2, r0, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	619a      	str	r2, [r3, #24]
 8001420:	e01b      	b.n	800145a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6959      	ldr	r1, [r3, #20]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1c5a      	adds	r2, r3, #1
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	2207      	movs	r2, #7
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	4019      	ands	r1, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6898      	ldr	r0, [r3, #8]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	fa00 f203 	lsl.w	r2, r0, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001462:	d004      	beq.n	800146e <HAL_ADC_ConfigChannel+0x416>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a18      	ldr	r2, [pc, #96]	@ (80014cc <HAL_ADC_ConfigChannel+0x474>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x41a>
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_ADC_ConfigChannel+0x478>)
 8001470:	e000      	b.n	8001474 <HAL_ADC_ConfigChannel+0x41c>
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_ADC_ConfigChannel+0x47c>)
 8001474:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b10      	cmp	r3, #16
 800147c:	d105      	bne.n	800148a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800147e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001486:	2b00      	cmp	r3, #0
 8001488:	d015      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800148e:	2b11      	cmp	r3, #17
 8001490:	d105      	bne.n	800149e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014a2:	2b12      	cmp	r3, #18
 80014a4:	f040 80ac 	bne.w	8001600 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80014a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f040 80a5 	bne.w	8001600 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014be:	d10b      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x480>
 80014c0:	4b02      	ldr	r3, [pc, #8]	@ (80014cc <HAL_ADC_ConfigChannel+0x474>)
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e023      	b.n	800150e <HAL_ADC_ConfigChannel+0x4b6>
 80014c6:	bf00      	nop
 80014c8:	83fff000 	.word	0x83fff000
 80014cc:	50000100 	.word	0x50000100
 80014d0:	50000300 	.word	0x50000300
 80014d4:	50000700 	.word	0x50000700
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001618 <HAL_ADC_ConfigChannel+0x5c0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d103      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x492>
 80014e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	e011      	b.n	800150e <HAL_ADC_ConfigChannel+0x4b6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a4b      	ldr	r2, [pc, #300]	@ (800161c <HAL_ADC_ConfigChannel+0x5c4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d102      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x4a2>
 80014f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001620 <HAL_ADC_ConfigChannel+0x5c8>)
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	e009      	b.n	800150e <HAL_ADC_ConfigChannel+0x4b6>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a48      	ldr	r2, [pc, #288]	@ (8001620 <HAL_ADC_ConfigChannel+0x5c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d102      	bne.n	800150a <HAL_ADC_ConfigChannel+0x4b2>
 8001504:	4b45      	ldr	r3, [pc, #276]	@ (800161c <HAL_ADC_ConfigChannel+0x5c4>)
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e001      	b.n	800150e <HAL_ADC_ConfigChannel+0x4b6>
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d108      	bne.n	800152e <HAL_ADC_ConfigChannel+0x4d6>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_ADC_ConfigChannel+0x4d6>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_ADC_ConfigChannel+0x4d8>
 800152e:	2300      	movs	r3, #0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d150      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001534:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001536:	2b00      	cmp	r3, #0
 8001538:	d010      	beq.n	800155c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b01      	cmp	r3, #1
 8001544:	d107      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x4fe>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x4fe>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_ADC_ConfigChannel+0x500>
 8001556:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001558:	2b00      	cmp	r3, #0
 800155a:	d13c      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b10      	cmp	r3, #16
 8001562:	d11d      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x548>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800156c:	d118      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800156e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001578:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800157a:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <HAL_ADC_ConfigChannel+0x5cc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a2a      	ldr	r2, [pc, #168]	@ (8001628 <HAL_ADC_ConfigChannel+0x5d0>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	0c9a      	lsrs	r2, r3, #18
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001590:	e002      	b.n	8001598 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3b01      	subs	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f9      	bne.n	8001592 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800159e:	e02e      	b.n	80015fe <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b11      	cmp	r3, #17
 80015a6:	d10b      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x568>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b0:	d106      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80015ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015bc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015be:	e01e      	b.n	80015fe <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b12      	cmp	r3, #18
 80015c6:	d11a      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015d2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015d4:	e013      	b.n	80015fe <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80015e8:	e00a      	b.n	8001600 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f043 0220 	orr.w	r2, r3, #32
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80015fc:	e000      	b.n	8001600 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015fe:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001608:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800160c:	4618      	mov	r0, r3
 800160e:	376c      	adds	r7, #108	@ 0x6c
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	50000100 	.word	0x50000100
 800161c:	50000400 	.word	0x50000400
 8001620:	50000500 	.word	0x50000500
 8001624:	20000000 	.word	0x20000000
 8001628:	431bde83 	.word	0x431bde83

0800162c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800162c:	b480      	push	{r7}
 800162e:	b099      	sub	sp, #100	@ 0x64
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001644:	d102      	bne.n	800164c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001646:	4b6d      	ldr	r3, [pc, #436]	@ (80017fc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	e01a      	b.n	8001682 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a6a      	ldr	r2, [pc, #424]	@ (80017fc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d103      	bne.n	800165e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001656:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	e011      	b.n	8001682 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a67      	ldr	r2, [pc, #412]	@ (8001800 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d102      	bne.n	800166e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001668:	4b66      	ldr	r3, [pc, #408]	@ (8001804 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	e009      	b.n	8001682 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a64      	ldr	r2, [pc, #400]	@ (8001804 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d102      	bne.n	800167e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001678:	4b61      	ldr	r3, [pc, #388]	@ (8001800 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	e001      	b.n	8001682 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0b0      	b.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001696:	2302      	movs	r3, #2
 8001698:	e0a9      	b.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 808d 	bne.w	80017cc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 8086 	bne.w	80017cc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016c8:	d004      	beq.n	80016d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a4b      	ldr	r2, [pc, #300]	@ (80017fc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80016d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001808 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80016d6:	e000      	b.n	80016da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80016d8:	4b4c      	ldr	r3, [pc, #304]	@ (800180c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80016da:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d040      	beq.n	8001766 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016f6:	035b      	lsls	r3, r3, #13
 80016f8:	430b      	orrs	r3, r1
 80016fa:	431a      	orrs	r2, r3
 80016fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016fe:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001720:	2300      	movs	r3, #0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d15c      	bne.n	80017e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d107      	bne.n	8001742 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001742:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001744:	2b00      	cmp	r3, #0
 8001746:	d14b      	bne.n	80017e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001748:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001750:	f023 030f 	bic.w	r3, r3, #15
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	6811      	ldr	r1, [r2, #0]
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	6892      	ldr	r2, [r2, #8]
 800175c:	430a      	orrs	r2, r1
 800175e:	431a      	orrs	r2, r3
 8001760:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001762:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001764:	e03c      	b.n	80017e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800176e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001770:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d108      	bne.n	8001792 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001792:	2300      	movs	r3, #0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d123      	bne.n	80017e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d107      	bne.n	80017b4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80017b4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d112      	bne.n	80017e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80017ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80017c2:	f023 030f 	bic.w	r3, r3, #15
 80017c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017c8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017ca:	e009      	b.n	80017e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	f043 0220 	orr.w	r2, r3, #32
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80017de:	e000      	b.n	80017e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017e0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80017ee:	4618      	mov	r0, r3
 80017f0:	3764      	adds	r7, #100	@ 0x64
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	50000100 	.word	0x50000100
 8001800:	50000400 	.word	0x50000400
 8001804:	50000500 	.word	0x50000500
 8001808:	50000300 	.word	0x50000300
 800180c:	50000700 	.word	0x50000700

08001810 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001826:	2b00      	cmp	r3, #0
 8001828:	d126      	bne.n	8001878 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001840:	2b00      	cmp	r3, #0
 8001842:	d115      	bne.n	8001870 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7ff f803 	bl	800087c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001876:	e004      	b.n	8001882 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	4798      	blx	r3
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f7fe fff9 	bl	8000890 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	f043 0204 	orr.w	r2, r3, #4
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f7fe ffe9 	bl	80008a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d108      	bne.n	8001908 <ADC_Enable+0x2c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <ADC_Enable+0x2c>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <ADC_Enable+0x2e>
 8001908:	2300      	movs	r3, #0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d143      	bne.n	8001996 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <ADC_Enable+0xc4>)
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00d      	beq.n	8001938 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	f043 0210 	orr.w	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e02f      	b.n	8001998 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001948:	f7fe ff68 	bl	800081c <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800194e:	e01b      	b.n	8001988 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001950:	f7fe ff64 	bl	800081c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d914      	bls.n	8001988 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d00d      	beq.n	8001988 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	f043 0210 	orr.w	r2, r3, #16
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197c:	f043 0201 	orr.w	r2, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e007      	b.n	8001998 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d1dc      	bne.n	8001950 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	8000003f 	.word	0x8000003f

080019a4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <ADC_Disable+0x2c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <ADC_Disable+0x2c>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <ADC_Disable+0x2e>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d047      	beq.n	8001a66 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030d 	and.w	r3, r3, #13
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d10f      	bne.n	8001a04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0202 	orr.w	r2, r2, #2
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2203      	movs	r2, #3
 80019fa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80019fc:	f7fe ff0e 	bl	800081c <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a02:	e029      	b.n	8001a58 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	f043 0210 	orr.w	r2, r3, #16
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e023      	b.n	8001a68 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a20:	f7fe fefc 	bl	800081c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d914      	bls.n	8001a58 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10d      	bne.n	8001a58 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f043 0210 	orr.w	r2, r3, #16
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4c:	f043 0201 	orr.w	r2, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e007      	b.n	8001a68 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d0dc      	beq.n	8001a20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 809b 	beq.w	8001bcc <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001aa4:	d12a      	bne.n	8001afc <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d126      	bne.n	8001afc <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d122      	bne.n	8001afc <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001aba:	e014      	b.n	8001ae6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4a46      	ldr	r2, [pc, #280]	@ (8001bd8 <ADC_ConversionStop+0x168>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d90d      	bls.n	8001ae0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	f043 0210 	orr.w	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e076      	b.n	8001bce <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af0:	2b40      	cmp	r3, #64	@ 0x40
 8001af2:	d1e3      	bne.n	8001abc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2240      	movs	r2, #64	@ 0x40
 8001afa:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b60      	cmp	r3, #96	@ 0x60
 8001b00:	d015      	beq.n	8001b2e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d10e      	bne.n	8001b2e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d107      	bne.n	8001b2e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0210 	orr.w	r2, r2, #16
 8001b2c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d015      	beq.n	8001b60 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d10e      	bne.n	8001b60 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0220 	orr.w	r2, r2, #32
 8001b5e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b60      	cmp	r3, #96	@ 0x60
 8001b64:	d005      	beq.n	8001b72 <ADC_ConversionStop+0x102>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b6c      	cmp	r3, #108	@ 0x6c
 8001b6a:	d105      	bne.n	8001b78 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	617b      	str	r3, [r7, #20]
        break;
 8001b70:	e005      	b.n	8001b7e <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001b72:	2308      	movs	r3, #8
 8001b74:	617b      	str	r3, [r7, #20]
        break;
 8001b76:	e002      	b.n	8001b7e <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001b78:	2304      	movs	r3, #4
 8001b7a:	617b      	str	r3, [r7, #20]
        break;
 8001b7c:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001b7e:	f7fe fe4d 	bl	800081c <HAL_GetTick>
 8001b82:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001b84:	e01b      	b.n	8001bbe <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b86:	f7fe fe49 	bl	800081c <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b0b      	cmp	r3, #11
 8001b92:	d914      	bls.n	8001bbe <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00d      	beq.n	8001bbe <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e007      	b.n	8001bce <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1dc      	bne.n	8001b86 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	000993ff 	.word	0x000993ff

08001bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0e:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <__NVIC_SetPriorityGrouping+0x44>)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	60d3      	str	r3, [r2, #12]
}
 8001c14:	bf00      	nop
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c28:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <__NVIC_GetPriorityGrouping+0x18>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	0a1b      	lsrs	r3, r3, #8
 8001c2e:	f003 0307 	and.w	r3, r3, #7
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	db0b      	blt.n	8001c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 021f 	and.w	r2, r3, #31
 8001c58:	4907      	ldr	r1, [pc, #28]	@ (8001c78 <__NVIC_EnableIRQ+0x38>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	2001      	movs	r0, #1
 8001c62:	fa00 f202 	lsl.w	r2, r0, r2
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	@ (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	@ (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	@ 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	@ 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d48:	d301      	bcc.n	8001d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00f      	b.n	8001d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <SysTick_Config+0x40>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d56:	210f      	movs	r1, #15
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f7ff ff8e 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <SysTick_Config+0x40>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d66:	4b04      	ldr	r3, [pc, #16]	@ (8001d78 <SysTick_Config+0x40>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	e000e010 	.word	0xe000e010

08001d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ff29 	bl	8001bdc <__NVIC_SetPriorityGrouping>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da4:	f7ff ff3e 	bl	8001c24 <__NVIC_GetPriorityGrouping>
 8001da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	6978      	ldr	r0, [r7, #20]
 8001db0:	f7ff ff8e 	bl	8001cd0 <NVIC_EncodePriority>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff5d 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff31 	bl	8001c40 <__NVIC_EnableIRQ>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffa2 	bl	8001d38 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b084      	sub	sp, #16
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e037      	b.n	8001e84 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e2a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f97e 	bl	8002168 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Start_IT+0x20>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e04a      	b.n	8001f42 <HAL_DMA_Start_IT+0xb6>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d13a      	bne.n	8001f34 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0201 	bic.w	r2, r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f912 	bl	800210c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 020e 	orr.w	r2, r2, #14
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e00f      	b.n	8001f22 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 020a 	orr.w	r2, r2, #10
 8001f10:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0204 	bic.w	r2, r2, #4
 8001f20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	e005      	b.n	8001f40 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e02e      	b.n	8001fba <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d008      	beq.n	8001f78 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e020      	b.n	8001fba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 020e 	bic.w	r2, r2, #14
 8001f86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d024      	beq.n	8002038 <HAL_DMA_IRQHandler+0x72>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01f      	beq.n	8002038 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0204 	bic.w	r2, r2, #4
 8002014:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201e:	2104      	movs	r1, #4
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d06a      	beq.n	8002104 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002036:	e065      	b.n	8002104 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	2202      	movs	r2, #2
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d02c      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xdc>
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d027      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 020a 	bic.w	r2, r2, #10
 800206e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	2102      	movs	r1, #2
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002094:	2b00      	cmp	r3, #0
 8002096:	d035      	beq.n	8002104 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020a0:	e030      	b.n	8002104 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	2208      	movs	r2, #8
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d028      	beq.n	8002104 <HAL_DMA_IRQHandler+0x13e>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d023      	beq.n	8002104 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 020e 	bic.w	r2, r2, #14
 80020ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f202 	lsl.w	r2, r1, r2
 80020da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d004      	beq.n	8002104 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
    }
  }
}
 8002102:	e7ff      	b.n	8002104 <HAL_DMA_IRQHandler+0x13e>
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
 8002118:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b10      	cmp	r3, #16
 8002138:	d108      	bne.n	800214c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800214a:	e007      	b.n	800215c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	60da      	str	r2, [r3, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <DMA_CalcBaseAndBitshift+0x60>)
 8002178:	429a      	cmp	r2, r3
 800217a:	d80f      	bhi.n	800219c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <DMA_CalcBaseAndBitshift+0x64>)
 8002184:	4413      	add	r3, r2
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a0f      	ldr	r2, [pc, #60]	@ (80021d4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002198:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800219a:	e00e      	b.n	80021ba <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <DMA_CalcBaseAndBitshift+0x70>)
 80021a4:	4413      	add	r3, r2
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <DMA_CalcBaseAndBitshift+0x68>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	009a      	lsls	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a09      	ldr	r2, [pc, #36]	@ (80021dc <DMA_CalcBaseAndBitshift+0x74>)
 80021b8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40020407 	.word	0x40020407
 80021cc:	bffdfff8 	.word	0xbffdfff8
 80021d0:	cccccccd 	.word	0xcccccccd
 80021d4:	40020000 	.word	0x40020000
 80021d8:	bffdfbf8 	.word	0xbffdfbf8
 80021dc:	40020400 	.word	0x40020400

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	e154      	b.n	800249a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8146 	beq.w	8002494 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d005      	beq.n	8002220 <HAL_GPIO_Init+0x40>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d130      	bne.n	8002282 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002256:	2201      	movs	r2, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 0201 	and.w	r2, r3, #1
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b03      	cmp	r3, #3
 800228c:	d017      	beq.n	80022be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d123      	bne.n	8002312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	6939      	ldr	r1, [r7, #16]
 800230e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0203 	and.w	r2, r3, #3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80a0 	beq.w	8002494 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002354:	4b58      	ldr	r3, [pc, #352]	@ (80024b8 <HAL_GPIO_Init+0x2d8>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	4a57      	ldr	r2, [pc, #348]	@ (80024b8 <HAL_GPIO_Init+0x2d8>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6193      	str	r3, [r2, #24]
 8002360:	4b55      	ldr	r3, [pc, #340]	@ (80024b8 <HAL_GPIO_Init+0x2d8>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800236c:	4a53      	ldr	r2, [pc, #332]	@ (80024bc <HAL_GPIO_Init+0x2dc>)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	220f      	movs	r2, #15
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002396:	d019      	beq.n	80023cc <HAL_GPIO_Init+0x1ec>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a49      	ldr	r2, [pc, #292]	@ (80024c0 <HAL_GPIO_Init+0x2e0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d013      	beq.n	80023c8 <HAL_GPIO_Init+0x1e8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a48      	ldr	r2, [pc, #288]	@ (80024c4 <HAL_GPIO_Init+0x2e4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00d      	beq.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a47      	ldr	r2, [pc, #284]	@ (80024c8 <HAL_GPIO_Init+0x2e8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <HAL_GPIO_Init+0x1e0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a46      	ldr	r2, [pc, #280]	@ (80024cc <HAL_GPIO_Init+0x2ec>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_GPIO_Init+0x1dc>
 80023b8:	2304      	movs	r3, #4
 80023ba:	e008      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023bc:	2305      	movs	r3, #5
 80023be:	e006      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c0:	2303      	movs	r3, #3
 80023c2:	e004      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023cc:	2300      	movs	r3, #0
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023de:	4937      	ldr	r1, [pc, #220]	@ (80024bc <HAL_GPIO_Init+0x2dc>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ec:	4b38      	ldr	r3, [pc, #224]	@ (80024d0 <HAL_GPIO_Init+0x2f0>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002410:	4a2f      	ldr	r2, [pc, #188]	@ (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002416:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800243a:	4a25      	ldr	r2, [pc, #148]	@ (80024d0 <HAL_GPIO_Init+0x2f0>)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002440:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002464:	4a1a      	ldr	r2, [pc, #104]	@ (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_GPIO_Init+0x2f0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800248e:	4a10      	ldr	r2, [pc, #64]	@ (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f47f aea3 	bne.w	80021f0 <HAL_GPIO_Init+0x10>
  }
}
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40010000 	.word	0x40010000
 80024c0:	48000400 	.word	0x48000400
 80024c4:	48000800 	.word	0x48000800
 80024c8:	48000c00 	.word	0x48000c00
 80024cc:	48001000 	.word	0x48001000
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80024da:	af00      	add	r7, sp, #0
 80024dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f000 bff4 	b.w	80034e2 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 816d 	beq.w	80027ea <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002510:	4bb4      	ldr	r3, [pc, #720]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b04      	cmp	r3, #4
 800251a:	d00c      	beq.n	8002536 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800251c:	4bb1      	ldr	r3, [pc, #708]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b08      	cmp	r3, #8
 8002526:	d157      	bne.n	80025d8 <HAL_RCC_OscConfig+0x104>
 8002528:	4bae      	ldr	r3, [pc, #696]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002534:	d150      	bne.n	80025d8 <HAL_RCC_OscConfig+0x104>
 8002536:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800253a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800254a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b3f      	cmp	r3, #63	@ 0x3f
 8002556:	d802      	bhi.n	800255e <HAL_RCC_OscConfig+0x8a>
 8002558:	4ba2      	ldr	r3, [pc, #648]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	e015      	b.n	800258a <HAL_RCC_OscConfig+0xb6>
 800255e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002562:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002572:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002576:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800257a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002586:	4b97      	ldr	r3, [pc, #604]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800258e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002592:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002596:	fa92 f2a2 	rbit	r2, r2
 800259a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800259e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80025a2:	fab2 f282 	clz	r2, r2
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f042 0220 	orr.w	r2, r2, #32
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f002 021f 	and.w	r2, r2, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f202 	lsl.w	r2, r1, r2
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8114 	beq.w	80027e8 <HAL_RCC_OscConfig+0x314>
 80025c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 810b 	bne.w	80027e8 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f000 bf85 	b.w	80034e2 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e8:	d106      	bne.n	80025f8 <HAL_RCC_OscConfig+0x124>
 80025ea:	4b7e      	ldr	r3, [pc, #504]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a7d      	ldr	r2, [pc, #500]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e036      	b.n	8002666 <HAL_RCC_OscConfig+0x192>
 80025f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10c      	bne.n	8002622 <HAL_RCC_OscConfig+0x14e>
 8002608:	4b76      	ldr	r3, [pc, #472]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a75      	ldr	r2, [pc, #468]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800260e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	4b73      	ldr	r3, [pc, #460]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a72      	ldr	r2, [pc, #456]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800261a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	e021      	b.n	8002666 <HAL_RCC_OscConfig+0x192>
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002632:	d10c      	bne.n	800264e <HAL_RCC_OscConfig+0x17a>
 8002634:	4b6b      	ldr	r3, [pc, #428]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6a      	ldr	r2, [pc, #424]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800263a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b68      	ldr	r3, [pc, #416]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a67      	ldr	r2, [pc, #412]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e00b      	b.n	8002666 <HAL_RCC_OscConfig+0x192>
 800264e:	4b65      	ldr	r3, [pc, #404]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a64      	ldr	r2, [pc, #400]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b62      	ldr	r3, [pc, #392]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a61      	ldr	r2, [pc, #388]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002660:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002664:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002666:	4b5f      	ldr	r3, [pc, #380]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266a:	f023 020f 	bic.w	r2, r3, #15
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	495a      	ldr	r1, [pc, #360]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800267c:	4313      	orrs	r3, r2
 800267e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d054      	beq.n	800273a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe f8c4 	bl	800081c <HAL_GetTick>
 8002694:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002698:	e00a      	b.n	80026b0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269a:	f7fe f8bf 	bl	800081c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	@ 0x64
 80026a8:	d902      	bls.n	80026b0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	f000 bf19 	b.w	80034e2 <HAL_RCC_OscConfig+0x100e>
 80026b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026b4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80026c4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80026d0:	d802      	bhi.n	80026d8 <HAL_RCC_OscConfig+0x204>
 80026d2:	4b44      	ldr	r3, [pc, #272]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	e015      	b.n	8002704 <HAL_RCC_OscConfig+0x230>
 80026d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026dc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80026ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026f0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80026f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002700:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 8002702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002704:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002708:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800270c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002710:	fa92 f2a2 	rbit	r2, r2
 8002714:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002718:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800271c:	fab2 f282 	clz	r2, r2
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	f042 0220 	orr.w	r2, r2, #32
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	f002 021f 	and.w	r2, r2, #31
 800272c:	2101      	movs	r1, #1
 800272e:	fa01 f202 	lsl.w	r2, r1, r2
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0b0      	beq.n	800269a <HAL_RCC_OscConfig+0x1c6>
 8002738:	e057      	b.n	80027ea <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe f86f 	bl	800081c <HAL_GetTick>
 800273e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe f86a 	bl	800081c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b64      	cmp	r3, #100	@ 0x64
 8002752:	d902      	bls.n	800275a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	f000 bec4 	b.w	80034e2 <HAL_RCC_OscConfig+0x100e>
 800275a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800275e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800276e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b3f      	cmp	r3, #63	@ 0x3f
 800277a:	d802      	bhi.n	8002782 <HAL_RCC_OscConfig+0x2ae>
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	e015      	b.n	80027ae <HAL_RCC_OscConfig+0x2da>
 8002782:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002786:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002796:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800279a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800279e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <HAL_RCC_OscConfig+0x310>)
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027b2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80027b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80027ba:	fa92 f2a2 	rbit	r2, r2
 80027be:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80027c2:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80027c6:	fab2 f282 	clz	r2, r2
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	f042 0220 	orr.w	r2, r2, #32
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f002 021f 	and.w	r2, r2, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1b0      	bne.n	8002744 <HAL_RCC_OscConfig+0x270>
 80027e2:	e002      	b.n	80027ea <HAL_RCC_OscConfig+0x316>
 80027e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 816c 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002800:	4bcc      	ldr	r3, [pc, #816]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800280c:	4bc9      	ldr	r3, [pc, #804]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d16d      	bne.n	80028f4 <HAL_RCC_OscConfig+0x420>
 8002818:	4bc6      	ldr	r3, [pc, #792]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d167      	bne.n	80028f4 <HAL_RCC_OscConfig+0x420>
 8002824:	2302      	movs	r3, #2
 8002826:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800282e:	fa93 f3a3 	rbit	r3, r3
 8002832:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002836:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b3f      	cmp	r3, #63	@ 0x3f
 8002842:	d802      	bhi.n	800284a <HAL_RCC_OscConfig+0x376>
 8002844:	4bbb      	ldr	r3, [pc, #748]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e013      	b.n	8002872 <HAL_RCC_OscConfig+0x39e>
 800284a:	2302      	movs	r3, #2
 800284c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800285c:	2302      	movs	r3, #2
 800285e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002862:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800286e:	4bb1      	ldr	r3, [pc, #708]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	2202      	movs	r2, #2
 8002874:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002878:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800287c:	fa92 f2a2 	rbit	r2, r2
 8002880:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002884:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002888:	fab2 f282 	clz	r2, r2
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f042 0220 	orr.w	r2, r2, #32
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f002 021f 	and.w	r2, r2, #31
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCC_OscConfig+0x3e6>
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d002      	beq.n	80028ba <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f000 be14 	b.w	80034e2 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	21f8      	movs	r1, #248	@ 0xf8
 80028d0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80028d8:	fa91 f1a1 	rbit	r1, r1
 80028dc:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80028e0:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80028e4:	fab1 f181 	clz	r1, r1
 80028e8:	b2c9      	uxtb	r1, r1
 80028ea:	408b      	lsls	r3, r1
 80028ec:	4991      	ldr	r1, [pc, #580]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e0f1      	b.n	8002ad8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 8083 	beq.w	8002a0c <HAL_RCC_OscConfig+0x538>
 8002906:	2301      	movs	r3, #1
 8002908:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002918:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002926:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	461a      	mov	r2, r3
 800292e:	2301      	movs	r3, #1
 8002930:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fd ff73 	bl	800081c <HAL_GetTick>
 8002936:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293c:	f7fd ff6e 	bl	800081c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d902      	bls.n	8002952 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	f000 bdc8 	b.w	80034e2 <HAL_RCC_OscConfig+0x100e>
 8002952:	2302      	movs	r3, #2
 8002954:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002964:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002970:	d802      	bhi.n	8002978 <HAL_RCC_OscConfig+0x4a4>
 8002972:	4b70      	ldr	r3, [pc, #448]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	e013      	b.n	80029a0 <HAL_RCC_OscConfig+0x4cc>
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002990:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800299c:	4b65      	ldr	r3, [pc, #404]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	2202      	movs	r2, #2
 80029a2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80029a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80029aa:	fa92 f2a2 	rbit	r2, r2
 80029ae:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80029b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80029b6:	fab2 f282 	clz	r2, r2
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	f042 0220 	orr.w	r2, r2, #32
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	f002 021f 	and.w	r2, r2, #31
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f202 	lsl.w	r2, r1, r2
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0b4      	beq.n	800293c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b58      	ldr	r3, [pc, #352]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	21f8      	movs	r1, #248	@ 0xf8
 80029e8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80029f0:	fa91 f1a1 	rbit	r1, r1
 80029f4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80029f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80029fc:	fab1 f181 	clz	r1, r1
 8002a00:	b2c9      	uxtb	r1, r1
 8002a02:	408b      	lsls	r3, r1
 8002a04:	494b      	ldr	r1, [pc, #300]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
 8002a0a:	e065      	b.n	8002ad8 <HAL_RCC_OscConfig+0x604>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	461a      	mov	r2, r3
 8002a34:	2300      	movs	r3, #0
 8002a36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fd fef0 	bl	800081c <HAL_GetTick>
 8002a3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a42:	f7fd feeb 	bl	800081c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d902      	bls.n	8002a58 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	f000 bd45 	b.w	80034e2 <HAL_RCC_OscConfig+0x100e>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a76:	d802      	bhi.n	8002a7e <HAL_RCC_OscConfig+0x5aa>
 8002a78:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	e013      	b.n	8002aa6 <HAL_RCC_OscConfig+0x5d2>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a90:	2302      	movs	r3, #2
 8002a92:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a96:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <HAL_RCC_OscConfig+0x660>)
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002aac:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002ab0:	fa92 f2a2 	rbit	r2, r2
 8002ab4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002ab8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002abc:	fab2 f282 	clz	r2, r2
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f042 0220 	orr.w	r2, r2, #32
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	f002 021f 	and.w	r2, r2, #31
 8002acc:	2101      	movs	r1, #1
 8002ace:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1b4      	bne.n	8002a42 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002adc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8115 	beq.w	8002d18 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d07e      	beq.n	8002bfc <HAL_RCC_OscConfig+0x728>
 8002afe:	2301      	movs	r3, #1
 8002b00:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_RCC_OscConfig+0x664>)
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	461a      	mov	r2, r3
 8002b24:	2301      	movs	r3, #1
 8002b26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b28:	f7fd fe78 	bl	800081c <HAL_GetTick>
 8002b2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b30:	e00f      	b.n	8002b52 <HAL_RCC_OscConfig+0x67e>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3c:	f7fd fe6e 	bl	800081c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d902      	bls.n	8002b52 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	f000 bcc8 	b.w	80034e2 <HAL_RCC_OscConfig+0x100e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b90:	2202      	movs	r2, #2
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	fa93 f2a3 	rbit	r2, r3
 8002ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002baa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bac:	4bb0      	ldr	r3, [pc, #704]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bb8:	2102      	movs	r1, #2
 8002bba:	6019      	str	r1, [r3, #0]
 8002bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f1a3 	rbit	r1, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bd2:	6019      	str	r1, [r3, #0]
  return result;
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0a0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x668>
 8002bfa:	e08d      	b.n	8002d18 <HAL_RCC_OscConfig+0x844>
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fa93 f2a3 	rbit	r2, r3
 8002c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c1e:	601a      	str	r2, [r3, #0]
  return result;
 8002c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c24:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c28:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b90      	ldr	r3, [pc, #576]	@ (8002e74 <HAL_RCC_OscConfig+0x9a0>)
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fd fded 	bl	800081c <HAL_GetTick>
 8002c42:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fd fde8 	bl	800081c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d902      	bls.n	8002c5e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	f000 bc42 	b.w	80034e2 <HAL_RCC_OscConfig+0x100e>
 8002c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c62:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c66:	2202      	movs	r2, #2
 8002c68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	fa93 f2a3 	rbit	r2, r3
 8002c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002caa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002cae:	2202      	movs	r2, #2
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cc8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cca:	4b69      	ldr	r3, [pc, #420]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	6019      	str	r1, [r3, #0]
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fa93 f1a3 	rbit	r1, r3
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cf0:	6019      	str	r1, [r3, #0]
  return result;
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d197      	bne.n	8002c48 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 819e 	beq.w	800306a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d34:	4b4e      	ldr	r3, [pc, #312]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d116      	bne.n	8002d6e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	4b4b      	ldr	r3, [pc, #300]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4a4a      	ldr	r2, [pc, #296]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	61d3      	str	r3, [r2, #28]
 8002d4c:	4b48      	ldr	r3, [pc, #288]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d58:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d66:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b42      	ldr	r3, [pc, #264]	@ (8002e78 <HAL_RCC_OscConfig+0x9a4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11a      	bne.n	8002db0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e78 <HAL_RCC_OscConfig+0x9a4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002e78 <HAL_RCC_OscConfig+0x9a4>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fd fd49 	bl	800081c <HAL_GetTick>
 8002d8a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	e009      	b.n	8002da4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d90:	f7fd fd44 	bl	800081c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b64      	cmp	r3, #100	@ 0x64
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e39e      	b.n	80034e2 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	4b34      	ldr	r3, [pc, #208]	@ (8002e78 <HAL_RCC_OscConfig+0x9a4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ef      	beq.n	8002d90 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d106      	bne.n	8002dce <HAL_RCC_OscConfig+0x8fa>
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	e035      	b.n	8002e3a <HAL_RCC_OscConfig+0x966>
 8002dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x924>
 8002dde:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a23      	ldr	r2, [pc, #140]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	4b21      	ldr	r3, [pc, #132]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a20      	ldr	r2, [pc, #128]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	6213      	str	r3, [r2, #32]
 8002df6:	e020      	b.n	8002e3a <HAL_RCC_OscConfig+0x966>
 8002df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d10c      	bne.n	8002e22 <HAL_RCC_OscConfig+0x94e>
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4a18      	ldr	r2, [pc, #96]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002e0e:	f043 0304 	orr.w	r3, r3, #4
 8002e12:	6213      	str	r3, [r2, #32]
 8002e14:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a15      	ldr	r2, [pc, #84]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6213      	str	r3, [r2, #32]
 8002e20:	e00b      	b.n	8002e3a <HAL_RCC_OscConfig+0x966>
 8002e22:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4a12      	ldr	r2, [pc, #72]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	6213      	str	r3, [r2, #32]
 8002e2e:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4a0f      	ldr	r2, [pc, #60]	@ (8002e70 <HAL_RCC_OscConfig+0x99c>)
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8087 	beq.w	8002f5a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7fd fce6 	bl	800081c <HAL_GetTick>
 8002e50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e54:	e012      	b.n	8002e7c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fd fce1 	bl	800081c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d908      	bls.n	8002e7c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e339      	b.n	80034e2 <HAL_RCC_OscConfig+0x100e>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
 8002e74:	10908120 	.word	0x10908120
 8002e78:	40007000 	.word	0x40007000
 8002e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e80:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e84:	2202      	movs	r2, #2
 8002e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f2a3 	rbit	r2, r3
 8002e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ec2:	601a      	str	r2, [r3, #0]
  return result;
 8002ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ecc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_OscConfig+0xa10>
 8002ede:	4b98      	ldr	r3, [pc, #608]	@ (8003140 <HAL_RCC_OscConfig+0xc6c>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	e013      	b.n	8002f0c <HAL_RCC_OscConfig+0xa38>
 8002ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002eec:	2202      	movs	r2, #2
 8002eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f02:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	4b8d      	ldr	r3, [pc, #564]	@ (8003140 <HAL_RCC_OscConfig+0xc6c>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f10:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f14:	2102      	movs	r1, #2
 8002f16:	6011      	str	r1, [r2, #0]
 8002f18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f1c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	fa92 f1a2 	rbit	r1, r2
 8002f26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f2a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f2e:	6011      	str	r1, [r2, #0]
  return result;
 8002f30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f34:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	fab2 f282 	clz	r2, r2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	f002 021f 	and.w	r2, r2, #31
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f43f af7f 	beq.w	8002e56 <HAL_RCC_OscConfig+0x982>
 8002f58:	e07d      	b.n	8003056 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fd fc5f 	bl	800081c <HAL_GetTick>
 8002f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7fd fc5a 	bl	800081c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e2b2      	b.n	80034e2 <HAL_RCC_OscConfig+0x100e>
 8002f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f80:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002f84:	2202      	movs	r2, #2
 8002f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	fa93 f2a3 	rbit	r2, r3
 8002f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002fa8:	2202      	movs	r2, #2
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002fc2:	601a      	str	r2, [r3, #0]
  return result;
 8002fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002fcc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xb10>
 8002fde:	4b58      	ldr	r3, [pc, #352]	@ (8003140 <HAL_RCC_OscConfig+0xc6c>)
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	e013      	b.n	800300c <HAL_RCC_OscConfig+0xb38>
 8002fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fec:	2202      	movs	r2, #2
 8002fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	fa93 f2a3 	rbit	r2, r3
 8002ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003002:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	4b4d      	ldr	r3, [pc, #308]	@ (8003140 <HAL_RCC_OscConfig+0xc6c>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003010:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003014:	2102      	movs	r1, #2
 8003016:	6011      	str	r1, [r2, #0]
 8003018:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	fa92 f1a2 	rbit	r1, r2
 8003026:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800302a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800302e:	6011      	str	r1, [r2, #0]
  return result;
 8003030:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003034:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	fab2 f282 	clz	r2, r2
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f002 021f 	and.w	r2, r2, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f202 	lsl.w	r2, r1, r2
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d186      	bne.n	8002f64 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003056:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800305a:	2b01      	cmp	r3, #1
 800305c:	d105      	bne.n	800306a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305e:	4b38      	ldr	r3, [pc, #224]	@ (8003140 <HAL_RCC_OscConfig+0xc6c>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4a37      	ldr	r2, [pc, #220]	@ (8003140 <HAL_RCC_OscConfig+0xc6c>)
 8003064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003068:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8232 	beq.w	80034e0 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307c:	4b30      	ldr	r3, [pc, #192]	@ (8003140 <HAL_RCC_OscConfig+0xc6c>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	f000 8201 	beq.w	800348c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	2b02      	cmp	r3, #2
 8003098:	f040 8157 	bne.w	800334a <HAL_RCC_OscConfig+0xe76>
 800309c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80030a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ae:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	fa93 f2a3 	rbit	r2, r3
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030c0:	601a      	str	r2, [r3, #0]
  return result;
 80030c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030ca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	461a      	mov	r2, r3
 80030de:	2300      	movs	r3, #0
 80030e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7fd fb9b 	bl	800081c <HAL_GetTick>
 80030e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ea:	e009      	b.n	8003100 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd fb96 	bl	800081c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1f0      	b.n	80034e2 <HAL_RCC_OscConfig+0x100e>
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003108:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800310c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003120:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003124:	601a      	str	r2, [r3, #0]
  return result;
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800312e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b3f      	cmp	r3, #63	@ 0x3f
 8003138:	d804      	bhi.n	8003144 <HAL_RCC_OscConfig+0xc70>
 800313a:	4b01      	ldr	r3, [pc, #4]	@ (8003140 <HAL_RCC_OscConfig+0xc6c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	e029      	b.n	8003194 <HAL_RCC_OscConfig+0xcc0>
 8003140:	40021000 	.word	0x40021000
 8003144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003148:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800314c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003156:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	fa93 f2a3 	rbit	r2, r3
 8003160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003164:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003172:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	4bc3      	ldr	r3, [pc, #780]	@ (80034a0 <HAL_RCC_OscConfig+0xfcc>)
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003198:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800319c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031a0:	6011      	str	r1, [r2, #0]
 80031a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	fa92 f1a2 	rbit	r1, r2
 80031b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031b4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031b8:	6011      	str	r1, [r2, #0]
  return result;
 80031ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031be:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	fab2 f282 	clz	r2, r2
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	f042 0220 	orr.w	r2, r2, #32
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	f002 021f 	and.w	r2, r2, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d185      	bne.n	80030ec <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e0:	4baf      	ldr	r3, [pc, #700]	@ (80034a0 <HAL_RCC_OscConfig+0xfcc>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80031f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	430b      	orrs	r3, r1
 8003202:	49a7      	ldr	r1, [pc, #668]	@ (80034a0 <HAL_RCC_OscConfig+0xfcc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
 8003208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003210:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	fa93 f2a3 	rbit	r2, r3
 8003224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003228:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800322c:	601a      	str	r2, [r3, #0]
  return result;
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003236:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003242:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	461a      	mov	r2, r3
 800324a:	2301      	movs	r3, #1
 800324c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fd fae5 	bl	800081c <HAL_GetTick>
 8003252:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003256:	e009      	b.n	800326c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7fd fae0 	bl	800081c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e13a      	b.n	80034e2 <HAL_RCC_OscConfig+0x100e>
 800326c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003270:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003290:	601a      	str	r2, [r3, #0]
  return result;
 8003292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003296:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800329a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80032a4:	d802      	bhi.n	80032ac <HAL_RCC_OscConfig+0xdd8>
 80032a6:	4b7e      	ldr	r3, [pc, #504]	@ (80034a0 <HAL_RCC_OscConfig+0xfcc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	e027      	b.n	80032fc <HAL_RCC_OscConfig+0xe28>
 80032ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032be:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	fa93 f2a3 	rbit	r2, r3
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80032da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	fa93 f2a3 	rbit	r2, r3
 80032ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	4b69      	ldr	r3, [pc, #420]	@ (80034a0 <HAL_RCC_OscConfig+0xfcc>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003300:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003304:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003308:	6011      	str	r1, [r2, #0]
 800330a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800330e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	fa92 f1a2 	rbit	r1, r2
 8003318:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800331c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003320:	6011      	str	r1, [r2, #0]
  return result;
 8003322:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003326:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	fab2 f282 	clz	r2, r2
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f042 0220 	orr.w	r2, r2, #32
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f002 021f 	and.w	r2, r2, #31
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f202 	lsl.w	r2, r1, r2
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d087      	beq.n	8003258 <HAL_RCC_OscConfig+0xd84>
 8003348:	e0ca      	b.n	80034e0 <HAL_RCC_OscConfig+0x100c>
 800334a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003352:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f2a3 	rbit	r2, r3
 8003366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800336e:	601a      	str	r2, [r3, #0]
  return result;
 8003370:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003374:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003378:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003384:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	461a      	mov	r2, r3
 800338c:	2300      	movs	r3, #0
 800338e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fd fa44 	bl	800081c <HAL_GetTick>
 8003394:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003398:	e009      	b.n	80033ae <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339a:	f7fd fa3f 	bl	800081c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e099      	b.n	80034e2 <HAL_RCC_OscConfig+0x100e>
 80033ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	fa93 f2a3 	rbit	r2, r3
 80033ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ce:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033d2:	601a      	str	r2, [r3, #0]
  return result;
 80033d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80033e6:	d802      	bhi.n	80033ee <HAL_RCC_OscConfig+0xf1a>
 80033e8:	4b2d      	ldr	r3, [pc, #180]	@ (80034a0 <HAL_RCC_OscConfig+0xfcc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	e027      	b.n	800343e <HAL_RCC_OscConfig+0xf6a>
 80033ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80033f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003400:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	fa93 f2a3 	rbit	r2, r3
 800340a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003418:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800341c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003426:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	fa93 f2a3 	rbit	r2, r3
 8003430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003434:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	4b19      	ldr	r3, [pc, #100]	@ (80034a0 <HAL_RCC_OscConfig+0xfcc>)
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003442:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003446:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800344a:	6011      	str	r1, [r2, #0]
 800344c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003450:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	fa92 f1a2 	rbit	r1, r2
 800345a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800345e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003462:	6011      	str	r1, [r2, #0]
  return result;
 8003464:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003468:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	fab2 f282 	clz	r2, r2
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f042 0220 	orr.w	r2, r2, #32
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	f002 021f 	and.w	r2, r2, #31
 800347e:	2101      	movs	r1, #1
 8003480:	fa01 f202 	lsl.w	r2, r1, r2
 8003484:	4013      	ands	r3, r2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d187      	bne.n	800339a <HAL_RCC_OscConfig+0xec6>
 800348a:	e029      	b.n	80034e0 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800348c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003490:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d103      	bne.n	80034a4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e020      	b.n	80034e2 <HAL_RCC_OscConfig+0x100e>
 80034a0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <HAL_RCC_OscConfig+0x1018>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80034b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d10b      	bne.n	80034dc <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80034c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80034c8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000

080034f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b09e      	sub	sp, #120	@ 0x78
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e154      	b.n	80037b2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b89      	ldr	r3, [pc, #548]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d910      	bls.n	8003538 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b86      	ldr	r3, [pc, #536]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 0207 	bic.w	r2, r3, #7
 800351e:	4984      	ldr	r1, [pc, #528]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b82      	ldr	r3, [pc, #520]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e13c      	b.n	80037b2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b7b      	ldr	r3, [pc, #492]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4978      	ldr	r1, [pc, #480]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80cd 	beq.w	80036fe <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d137      	bne.n	80035dc <HAL_RCC_ClockConfig+0xec>
 800356c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003570:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800357a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357c:	fab3 f383 	clz	r3, r3
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b3f      	cmp	r3, #63	@ 0x3f
 8003584:	d802      	bhi.n	800358c <HAL_RCC_ClockConfig+0x9c>
 8003586:	4b6b      	ldr	r3, [pc, #428]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e00f      	b.n	80035ac <HAL_RCC_ClockConfig+0xbc>
 800358c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003590:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	667b      	str	r3, [r7, #100]	@ 0x64
 800359a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800359e:	663b      	str	r3, [r7, #96]	@ 0x60
 80035a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035a8:	4b62      	ldr	r3, [pc, #392]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035b4:	fa92 f2a2 	rbit	r2, r2
 80035b8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80035ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035bc:	fab2 f282 	clz	r2, r2
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	f042 0220 	orr.w	r2, r2, #32
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f002 021f 	and.w	r2, r2, #31
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f202 	lsl.w	r2, r1, r2
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d171      	bne.n	80036bc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0ea      	b.n	80037b2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d137      	bne.n	8003654 <HAL_RCC_ClockConfig+0x164>
 80035e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035e8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80035fc:	d802      	bhi.n	8003604 <HAL_RCC_ClockConfig+0x114>
 80035fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	e00f      	b.n	8003624 <HAL_RCC_ClockConfig+0x134>
 8003604:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003608:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800360c:	fa93 f3a3 	rbit	r3, r3
 8003610:	647b      	str	r3, [r7, #68]	@ 0x44
 8003612:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003616:	643b      	str	r3, [r7, #64]	@ 0x40
 8003618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003620:	4b44      	ldr	r3, [pc, #272]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 8003622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003624:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003628:	63ba      	str	r2, [r7, #56]	@ 0x38
 800362a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800362c:	fa92 f2a2 	rbit	r2, r2
 8003630:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003634:	fab2 f282 	clz	r2, r2
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	f042 0220 	orr.w	r2, r2, #32
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f002 021f 	and.w	r2, r2, #31
 8003644:	2101      	movs	r1, #1
 8003646:	fa01 f202 	lsl.w	r2, r1, r2
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d135      	bne.n	80036bc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0ae      	b.n	80037b2 <HAL_RCC_ClockConfig+0x2c2>
 8003654:	2302      	movs	r3, #2
 8003656:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b3f      	cmp	r3, #63	@ 0x3f
 800366a:	d802      	bhi.n	8003672 <HAL_RCC_ClockConfig+0x182>
 800366c:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	e00d      	b.n	800368e <HAL_RCC_ClockConfig+0x19e>
 8003672:	2302      	movs	r3, #2
 8003674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
 800367e:	2302      	movs	r3, #2
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	4b2a      	ldr	r3, [pc, #168]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	2202      	movs	r2, #2
 8003690:	61ba      	str	r2, [r7, #24]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	fa92 f2a2 	rbit	r2, r2
 8003698:	617a      	str	r2, [r7, #20]
  return result;
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	f042 0220 	orr.w	r2, r2, #32
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f002 021f 	and.w	r2, r2, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f202 	lsl.w	r2, r1, r2
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e07a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f023 0203 	bic.w	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	491a      	ldr	r1, [pc, #104]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ce:	f7fd f8a5 	bl	800081c <HAL_GetTick>
 80036d2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d6:	f7fd f8a1 	bl	800081c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e062      	b.n	80037b2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ec:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <HAL_RCC_ClockConfig+0x244>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 020c 	and.w	r2, r3, #12
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d1eb      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d215      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370c:	4b08      	ldr	r3, [pc, #32]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 0207 	bic.w	r2, r3, #7
 8003714:	4906      	ldr	r1, [pc, #24]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	4313      	orrs	r3, r2
 800371a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371c:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <HAL_RCC_ClockConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d006      	beq.n	8003738 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e041      	b.n	80037b2 <HAL_RCC_ClockConfig+0x2c2>
 800372e:	bf00      	nop
 8003730:	40022000 	.word	0x40022000
 8003734:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003744:	4b1d      	ldr	r3, [pc, #116]	@ (80037bc <HAL_RCC_ClockConfig+0x2cc>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	491a      	ldr	r1, [pc, #104]	@ (80037bc <HAL_RCC_ClockConfig+0x2cc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003762:	4b16      	ldr	r3, [pc, #88]	@ (80037bc <HAL_RCC_ClockConfig+0x2cc>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4912      	ldr	r1, [pc, #72]	@ (80037bc <HAL_RCC_ClockConfig+0x2cc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003776:	f000 f829 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 800377a:	4601      	mov	r1, r0
 800377c:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <HAL_RCC_ClockConfig+0x2cc>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003784:	22f0      	movs	r2, #240	@ 0xf0
 8003786:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	fa92 f2a2 	rbit	r2, r2
 800378e:	60fa      	str	r2, [r7, #12]
  return result;
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	fab2 f282 	clz	r2, r2
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	40d3      	lsrs	r3, r2
 800379a:	4a09      	ldr	r2, [pc, #36]	@ (80037c0 <HAL_RCC_ClockConfig+0x2d0>)
 800379c:	5cd3      	ldrb	r3, [r2, r3]
 800379e:	fa21 f303 	lsr.w	r3, r1, r3
 80037a2:	4a08      	ldr	r2, [pc, #32]	@ (80037c4 <HAL_RCC_ClockConfig+0x2d4>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80037a6:	4b08      	ldr	r3, [pc, #32]	@ (80037c8 <HAL_RCC_ClockConfig+0x2d8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fff2 	bl	8000794 <HAL_InitTick>
  
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3778      	adds	r7, #120	@ 0x78
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	08004670 	.word	0x08004670
 80037c4:	20000000 	.word	0x20000000
 80037c8:	20000004 	.word	0x20000004

080037cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80037e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x94>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d002      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x30>
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_GetSysClockFreq+0x36>
 80037fa:	e026      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037fc:	4b19      	ldr	r3, [pc, #100]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x98>)
 80037fe:	613b      	str	r3, [r7, #16]
      break;
 8003800:	e026      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	0c9b      	lsrs	r3, r3, #18
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	4a17      	ldr	r2, [pc, #92]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x9c>)
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003810:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <HAL_RCC_GetSysClockFreq+0x94>)
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	4a14      	ldr	r2, [pc, #80]	@ (800386c <HAL_RCC_GetSysClockFreq+0xa0>)
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003828:	4a0e      	ldr	r2, [pc, #56]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x98>)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e004      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a0c      	ldr	r2, [pc, #48]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xa4>)
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	613b      	str	r3, [r7, #16]
      break;
 8003848:	e002      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x98>)
 800384c:	613b      	str	r3, [r7, #16]
      break;
 800384e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003850:	693b      	ldr	r3, [r7, #16]
}
 8003852:	4618      	mov	r0, r3
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	007a1200 	.word	0x007a1200
 8003868:	08004688 	.word	0x08004688
 800386c:	08004698 	.word	0x08004698
 8003870:	003d0900 	.word	0x003d0900

08003874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003878:	4b03      	ldr	r3, [pc, #12]	@ (8003888 <HAL_RCC_GetHCLKFreq+0x14>)
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003892:	f7ff ffef 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 8003896:	4601      	mov	r1, r0
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038a0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80038a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	fa92 f2a2 	rbit	r2, r2
 80038ac:	603a      	str	r2, [r7, #0]
  return result;
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	fab2 f282 	clz	r2, r2
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	40d3      	lsrs	r3, r2
 80038b8:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80038ba:	5cd3      	ldrb	r3, [r2, r3]
 80038bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08004680 	.word	0x08004680

080038d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80038d6:	f7ff ffcd 	bl	8003874 <HAL_RCC_GetHCLKFreq>
 80038da:	4601      	mov	r1, r0
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80038e4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80038e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	fa92 f2a2 	rbit	r2, r2
 80038f0:	603a      	str	r2, [r7, #0]
  return result;
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	fab2 f282 	clz	r2, r2
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	40d3      	lsrs	r3, r2
 80038fc:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <HAL_RCC_GetPCLK2Freq+0x40>)
 80038fe:	5cd3      	ldrb	r3, [r2, r3]
 8003900:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	08004680 	.word	0x08004680

08003914 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b092      	sub	sp, #72	@ 0x48
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003924:	2300      	movs	r3, #0
 8003926:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80d2 	beq.w	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003938:	4b4d      	ldr	r3, [pc, #308]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10e      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003944:	4b4a      	ldr	r3, [pc, #296]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	4a49      	ldr	r2, [pc, #292]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800394a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394e:	61d3      	str	r3, [r2, #28]
 8003950:	4b47      	ldr	r3, [pc, #284]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003962:	4b44      	ldr	r3, [pc, #272]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d118      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396e:	4b41      	ldr	r3, [pc, #260]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a40      	ldr	r2, [pc, #256]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003978:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397a:	f7fc ff4f 	bl	800081c <HAL_GetTick>
 800397e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003980:	e008      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003982:	f7fc ff4b 	bl	800081c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b64      	cmp	r3, #100	@ 0x64
 800398e:	d901      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e167      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	4b37      	ldr	r3, [pc, #220]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039a0:	4b33      	ldr	r3, [pc, #204]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8082 	beq.w	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039bc:	429a      	cmp	r2, r3
 80039be:	d07a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	461a      	mov	r2, r3
 80039ea:	2301      	movs	r3, #1
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80039fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b1c      	ldr	r3, [pc, #112]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2300      	movs	r3, #0
 8003a10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a12:	4a17      	ldr	r2, [pc, #92]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d049      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fc fefb 	bl	800081c <HAL_GetTick>
 8003a26:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	e00a      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2a:	f7fc fef7 	bl	800081c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e111      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8003a40:	2302      	movs	r3, #2
 8003a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	623b      	str	r3, [r7, #32]
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	fa93 f3a3 	rbit	r3, r3
 8003a56:	61fb      	str	r3, [r7, #28]
  return result;
 8003a58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5a:	fab3 f383 	clz	r3, r3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d108      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003a6a:	4b01      	ldr	r3, [pc, #4]	@ (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	e00d      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40007000 	.word	0x40007000
 8003a78:	10908100 	.word	0x10908100
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	4b78      	ldr	r3, [pc, #480]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	613a      	str	r2, [r7, #16]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	fa92 f2a2 	rbit	r2, r2
 8003a96:	60fa      	str	r2, [r7, #12]
  return result;
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	fab2 f282 	clz	r2, r2
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	f002 021f 	and.w	r2, r2, #31
 8003aaa:	2101      	movs	r1, #1
 8003aac:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0b9      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	496a      	ldr	r1, [pc, #424]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ac8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad0:	4b66      	ldr	r3, [pc, #408]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	4a65      	ldr	r2, [pc, #404]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003ad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ae8:	4b60      	ldr	r3, [pc, #384]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	f023 0203 	bic.w	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	495d      	ldr	r1, [pc, #372]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b06:	4b59      	ldr	r3, [pc, #356]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	4956      	ldr	r1, [pc, #344]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b24:	4b51      	ldr	r3, [pc, #324]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	494e      	ldr	r1, [pc, #312]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b42:	4b4a      	ldr	r3, [pc, #296]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	f023 0210 	bic.w	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4947      	ldr	r1, [pc, #284]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b60:	4b42      	ldr	r3, [pc, #264]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6c:	493f      	ldr	r1, [pc, #252]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	f023 0220 	bic.w	r2, r3, #32
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4938      	ldr	r1, [pc, #224]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0308 	and.w	r3, r3, #8
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b9c:	4b33      	ldr	r3, [pc, #204]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	4930      	ldr	r1, [pc, #192]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bba:	4b2c      	ldr	r3, [pc, #176]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	4929      	ldr	r1, [pc, #164]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bd8:	4b24      	ldr	r3, [pc, #144]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	4921      	ldr	r1, [pc, #132]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfa:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	491a      	ldr	r1, [pc, #104]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c14:	4b15      	ldr	r3, [pc, #84]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c18:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	4912      	ldr	r1, [pc, #72]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c32:	4b0e      	ldr	r3, [pc, #56]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	490b      	ldr	r1, [pc, #44]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5c:	4903      	ldr	r1, [pc, #12]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3748      	adds	r7, #72	@ 0x48
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000

08003c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e040      	b.n	8003d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fc fcae 	bl	80005f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2224      	movs	r2, #36	@ 0x24
 8003c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fa86 	bl	80041c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8af 	bl	8003e20 <UART_SetConfig>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e01b      	b.n	8003d04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fb05 	bl	800430c <UART_CheckIdleState>
 8003d02:	4603      	mov	r3, r0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	@ 0x28
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d177      	bne.n	8003e14 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_UART_Transmit+0x24>
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e070      	b.n	8003e16 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2221      	movs	r2, #33	@ 0x21
 8003d40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d42:	f7fc fd6b 	bl	800081c <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d60:	d108      	bne.n	8003d74 <HAL_UART_Transmit+0x68>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e003      	b.n	8003d7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d7c:	e02f      	b.n	8003dde <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2200      	movs	r2, #0
 8003d86:	2180      	movs	r1, #128	@ 0x80
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fb67 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e03b      	b.n	8003e16 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	881a      	ldrh	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db0:	b292      	uxth	r2, r2
 8003db2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	3302      	adds	r3, #2
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e007      	b.n	8003dcc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1c9      	bne.n	8003d7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2140      	movs	r1, #64	@ 0x40
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fb31 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e005      	b.n	8003e16 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
  }
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003e4e:	f023 030c 	bic.w	r3, r3, #12
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	6979      	ldr	r1, [r7, #20]
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4aa7      	ldr	r2, [pc, #668]	@ (8004138 <UART_SetConfig+0x318>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d120      	bne.n	8003ee2 <UART_SetConfig+0xc2>
 8003ea0:	4ba6      	ldr	r3, [pc, #664]	@ (800413c <UART_SetConfig+0x31c>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d817      	bhi.n	8003edc <UART_SetConfig+0xbc>
 8003eac:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb4 <UART_SetConfig+0x94>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ed1 	.word	0x08003ed1
 8003ebc:	08003ed7 	.word	0x08003ed7
 8003ec0:	08003ecb 	.word	0x08003ecb
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e0b5      	b.n	8004036 <UART_SetConfig+0x216>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e0b2      	b.n	8004036 <UART_SetConfig+0x216>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e0af      	b.n	8004036 <UART_SetConfig+0x216>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e0ac      	b.n	8004036 <UART_SetConfig+0x216>
 8003edc:	2310      	movs	r3, #16
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e0a9      	b.n	8004036 <UART_SetConfig+0x216>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a96      	ldr	r2, [pc, #600]	@ (8004140 <UART_SetConfig+0x320>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d124      	bne.n	8003f36 <UART_SetConfig+0x116>
 8003eec:	4b93      	ldr	r3, [pc, #588]	@ (800413c <UART_SetConfig+0x31c>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ef4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ef8:	d011      	beq.n	8003f1e <UART_SetConfig+0xfe>
 8003efa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003efe:	d817      	bhi.n	8003f30 <UART_SetConfig+0x110>
 8003f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f04:	d011      	beq.n	8003f2a <UART_SetConfig+0x10a>
 8003f06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f0a:	d811      	bhi.n	8003f30 <UART_SetConfig+0x110>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <UART_SetConfig+0xf8>
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f14:	d006      	beq.n	8003f24 <UART_SetConfig+0x104>
 8003f16:	e00b      	b.n	8003f30 <UART_SetConfig+0x110>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e08b      	b.n	8004036 <UART_SetConfig+0x216>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e088      	b.n	8004036 <UART_SetConfig+0x216>
 8003f24:	2304      	movs	r3, #4
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e085      	b.n	8004036 <UART_SetConfig+0x216>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e082      	b.n	8004036 <UART_SetConfig+0x216>
 8003f30:	2310      	movs	r3, #16
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e07f      	b.n	8004036 <UART_SetConfig+0x216>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a82      	ldr	r2, [pc, #520]	@ (8004144 <UART_SetConfig+0x324>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d124      	bne.n	8003f8a <UART_SetConfig+0x16a>
 8003f40:	4b7e      	ldr	r3, [pc, #504]	@ (800413c <UART_SetConfig+0x31c>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003f48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f4c:	d011      	beq.n	8003f72 <UART_SetConfig+0x152>
 8003f4e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f52:	d817      	bhi.n	8003f84 <UART_SetConfig+0x164>
 8003f54:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f58:	d011      	beq.n	8003f7e <UART_SetConfig+0x15e>
 8003f5a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f5e:	d811      	bhi.n	8003f84 <UART_SetConfig+0x164>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <UART_SetConfig+0x14c>
 8003f64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f68:	d006      	beq.n	8003f78 <UART_SetConfig+0x158>
 8003f6a:	e00b      	b.n	8003f84 <UART_SetConfig+0x164>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e061      	b.n	8004036 <UART_SetConfig+0x216>
 8003f72:	2302      	movs	r3, #2
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e05e      	b.n	8004036 <UART_SetConfig+0x216>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e05b      	b.n	8004036 <UART_SetConfig+0x216>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	77fb      	strb	r3, [r7, #31]
 8003f82:	e058      	b.n	8004036 <UART_SetConfig+0x216>
 8003f84:	2310      	movs	r3, #16
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e055      	b.n	8004036 <UART_SetConfig+0x216>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6e      	ldr	r2, [pc, #440]	@ (8004148 <UART_SetConfig+0x328>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d124      	bne.n	8003fde <UART_SetConfig+0x1be>
 8003f94:	4b69      	ldr	r3, [pc, #420]	@ (800413c <UART_SetConfig+0x31c>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003f9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fa0:	d011      	beq.n	8003fc6 <UART_SetConfig+0x1a6>
 8003fa2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fa6:	d817      	bhi.n	8003fd8 <UART_SetConfig+0x1b8>
 8003fa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fac:	d011      	beq.n	8003fd2 <UART_SetConfig+0x1b2>
 8003fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fb2:	d811      	bhi.n	8003fd8 <UART_SetConfig+0x1b8>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <UART_SetConfig+0x1a0>
 8003fb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fbc:	d006      	beq.n	8003fcc <UART_SetConfig+0x1ac>
 8003fbe:	e00b      	b.n	8003fd8 <UART_SetConfig+0x1b8>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	77fb      	strb	r3, [r7, #31]
 8003fc4:	e037      	b.n	8004036 <UART_SetConfig+0x216>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e034      	b.n	8004036 <UART_SetConfig+0x216>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e031      	b.n	8004036 <UART_SetConfig+0x216>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e02e      	b.n	8004036 <UART_SetConfig+0x216>
 8003fd8:	2310      	movs	r3, #16
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e02b      	b.n	8004036 <UART_SetConfig+0x216>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5a      	ldr	r2, [pc, #360]	@ (800414c <UART_SetConfig+0x32c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d124      	bne.n	8004032 <UART_SetConfig+0x212>
 8003fe8:	4b54      	ldr	r3, [pc, #336]	@ (800413c <UART_SetConfig+0x31c>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003ff0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ff4:	d011      	beq.n	800401a <UART_SetConfig+0x1fa>
 8003ff6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ffa:	d817      	bhi.n	800402c <UART_SetConfig+0x20c>
 8003ffc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004000:	d011      	beq.n	8004026 <UART_SetConfig+0x206>
 8004002:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004006:	d811      	bhi.n	800402c <UART_SetConfig+0x20c>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <UART_SetConfig+0x1f4>
 800400c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004010:	d006      	beq.n	8004020 <UART_SetConfig+0x200>
 8004012:	e00b      	b.n	800402c <UART_SetConfig+0x20c>
 8004014:	2300      	movs	r3, #0
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e00d      	b.n	8004036 <UART_SetConfig+0x216>
 800401a:	2302      	movs	r3, #2
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e00a      	b.n	8004036 <UART_SetConfig+0x216>
 8004020:	2304      	movs	r3, #4
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e007      	b.n	8004036 <UART_SetConfig+0x216>
 8004026:	2308      	movs	r3, #8
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e004      	b.n	8004036 <UART_SetConfig+0x216>
 800402c:	2310      	movs	r3, #16
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e001      	b.n	8004036 <UART_SetConfig+0x216>
 8004032:	2310      	movs	r3, #16
 8004034:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800403e:	d15b      	bne.n	80040f8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004040:	7ffb      	ldrb	r3, [r7, #31]
 8004042:	2b08      	cmp	r3, #8
 8004044:	d827      	bhi.n	8004096 <UART_SetConfig+0x276>
 8004046:	a201      	add	r2, pc, #4	@ (adr r2, 800404c <UART_SetConfig+0x22c>)
 8004048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404c:	08004071 	.word	0x08004071
 8004050:	08004079 	.word	0x08004079
 8004054:	08004081 	.word	0x08004081
 8004058:	08004097 	.word	0x08004097
 800405c:	08004087 	.word	0x08004087
 8004060:	08004097 	.word	0x08004097
 8004064:	08004097 	.word	0x08004097
 8004068:	08004097 	.word	0x08004097
 800406c:	0800408f 	.word	0x0800408f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004070:	f7ff fc0c 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 8004074:	61b8      	str	r0, [r7, #24]
        break;
 8004076:	e013      	b.n	80040a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7ff fc2a 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 800407c:	61b8      	str	r0, [r7, #24]
        break;
 800407e:	e00f      	b.n	80040a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004080:	4b33      	ldr	r3, [pc, #204]	@ (8004150 <UART_SetConfig+0x330>)
 8004082:	61bb      	str	r3, [r7, #24]
        break;
 8004084:	e00c      	b.n	80040a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004086:	f7ff fba1 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 800408a:	61b8      	str	r0, [r7, #24]
        break;
 800408c:	e008      	b.n	80040a0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800408e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004092:	61bb      	str	r3, [r7, #24]
        break;
 8004094:	e004      	b.n	80040a0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	77bb      	strb	r3, [r7, #30]
        break;
 800409e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8082 	beq.w	80041ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	005a      	lsls	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d916      	bls.n	80040f2 <UART_SetConfig+0x2d2>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ca:	d212      	bcs.n	80040f2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f023 030f 	bic.w	r3, r3, #15
 80040d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	89fb      	ldrh	r3, [r7, #14]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	89fa      	ldrh	r2, [r7, #14]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	e05c      	b.n	80041ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	77bb      	strb	r3, [r7, #30]
 80040f6:	e059      	b.n	80041ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040f8:	7ffb      	ldrb	r3, [r7, #31]
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d835      	bhi.n	800416a <UART_SetConfig+0x34a>
 80040fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004104 <UART_SetConfig+0x2e4>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004129 	.word	0x08004129
 8004108:	08004131 	.word	0x08004131
 800410c:	08004155 	.word	0x08004155
 8004110:	0800416b 	.word	0x0800416b
 8004114:	0800415b 	.word	0x0800415b
 8004118:	0800416b 	.word	0x0800416b
 800411c:	0800416b 	.word	0x0800416b
 8004120:	0800416b 	.word	0x0800416b
 8004124:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004128:	f7ff fbb0 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 800412c:	61b8      	str	r0, [r7, #24]
        break;
 800412e:	e021      	b.n	8004174 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7ff fbce 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8004134:	61b8      	str	r0, [r7, #24]
        break;
 8004136:	e01d      	b.n	8004174 <UART_SetConfig+0x354>
 8004138:	40013800 	.word	0x40013800
 800413c:	40021000 	.word	0x40021000
 8004140:	40004400 	.word	0x40004400
 8004144:	40004800 	.word	0x40004800
 8004148:	40004c00 	.word	0x40004c00
 800414c:	40005000 	.word	0x40005000
 8004150:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <UART_SetConfig+0x3a4>)
 8004156:	61bb      	str	r3, [r7, #24]
        break;
 8004158:	e00c      	b.n	8004174 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7ff fb37 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 800415e:	61b8      	str	r0, [r7, #24]
        break;
 8004160:	e008      	b.n	8004174 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004166:	61bb      	str	r3, [r7, #24]
        break;
 8004168:	e004      	b.n	8004174 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	77bb      	strb	r3, [r7, #30]
        break;
 8004172:	bf00      	nop
    }

    if (pclk != 0U)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d018      	beq.n	80041ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	085a      	lsrs	r2, r3, #1
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	441a      	add	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b0f      	cmp	r3, #15
 8004192:	d909      	bls.n	80041a8 <UART_SetConfig+0x388>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800419a:	d205      	bcs.n	80041a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	b29a      	uxth	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	e001      	b.n	80041ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	007a1200 	.word	0x007a1200

080041c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	f003 0304 	and.w	r3, r3, #4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01a      	beq.n	80042de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042c6:	d10a      	bne.n	80042de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b098      	sub	sp, #96	@ 0x60
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800431c:	f7fc fa7e 	bl	800081c <HAL_GetTick>
 8004320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b08      	cmp	r3, #8
 800432e:	d12e      	bne.n	800438e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004338:	2200      	movs	r2, #0
 800433a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f88c 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d021      	beq.n	800438e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800435e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004368:	647b      	str	r3, [r7, #68]	@ 0x44
 800436a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800436e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e6      	bne.n	800434a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e062      	b.n	8004454 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d149      	bne.n	8004430 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800439c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a4:	2200      	movs	r2, #0
 80043a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f856 	bl	800445c <UART_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d03c      	beq.n	8004430 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	623b      	str	r3, [r7, #32]
   return(result);
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004408:	61fa      	str	r2, [r7, #28]
 800440a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	69b9      	ldr	r1, [r7, #24]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	617b      	str	r3, [r7, #20]
   return(result);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e5      	bne.n	80043e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e011      	b.n	8004454 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3758      	adds	r7, #88	@ 0x58
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446c:	e04f      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d04b      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fc f9d1 	bl	800081c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <UART_WaitOnFlagUntilTimeout+0x30>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e04e      	b.n	800452e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d037      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b80      	cmp	r3, #128	@ 0x80
 80044a2:	d034      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b40      	cmp	r3, #64	@ 0x40
 80044a8:	d031      	beq.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d110      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2208      	movs	r2, #8
 80044be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f838 	bl	8004536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2208      	movs	r2, #8
 80044ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e029      	b.n	800452e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e8:	d111      	bne.n	800450e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f81e 	bl	8004536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e00f      	b.n	800452e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	429a      	cmp	r2, r3
 800451c:	bf0c      	ite	eq
 800451e:	2301      	moveq	r3, #1
 8004520:	2300      	movne	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	429a      	cmp	r2, r3
 800452a:	d0a0      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004536:	b480      	push	{r7}
 8004538:	b095      	sub	sp, #84	@ 0x54
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800455c:	643b      	str	r3, [r7, #64]	@ 0x40
 800455e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004562:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800456a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e6      	bne.n	800453e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	e853 3f00 	ldrex	r3, [r3]
 800457e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3308      	adds	r3, #8
 800458e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004590:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e5      	bne.n	8004570 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d118      	bne.n	80045de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f023 0310 	bic.w	r3, r3, #16
 80045c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6979      	ldr	r1, [r7, #20]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	613b      	str	r3, [r7, #16]
   return(result);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e6      	bne.n	80045ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045f2:	bf00      	nop
 80045f4:	3754      	adds	r7, #84	@ 0x54
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <memset>:
 80045fe:	4402      	add	r2, r0
 8004600:	4603      	mov	r3, r0
 8004602:	4293      	cmp	r3, r2
 8004604:	d100      	bne.n	8004608 <memset+0xa>
 8004606:	4770      	bx	lr
 8004608:	f803 1b01 	strb.w	r1, [r3], #1
 800460c:	e7f9      	b.n	8004602 <memset+0x4>
	...

08004610 <__libc_init_array>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	4d0d      	ldr	r5, [pc, #52]	@ (8004648 <__libc_init_array+0x38>)
 8004614:	4c0d      	ldr	r4, [pc, #52]	@ (800464c <__libc_init_array+0x3c>)
 8004616:	1b64      	subs	r4, r4, r5
 8004618:	10a4      	asrs	r4, r4, #2
 800461a:	2600      	movs	r6, #0
 800461c:	42a6      	cmp	r6, r4
 800461e:	d109      	bne.n	8004634 <__libc_init_array+0x24>
 8004620:	4d0b      	ldr	r5, [pc, #44]	@ (8004650 <__libc_init_array+0x40>)
 8004622:	4c0c      	ldr	r4, [pc, #48]	@ (8004654 <__libc_init_array+0x44>)
 8004624:	f000 f818 	bl	8004658 <_init>
 8004628:	1b64      	subs	r4, r4, r5
 800462a:	10a4      	asrs	r4, r4, #2
 800462c:	2600      	movs	r6, #0
 800462e:	42a6      	cmp	r6, r4
 8004630:	d105      	bne.n	800463e <__libc_init_array+0x2e>
 8004632:	bd70      	pop	{r4, r5, r6, pc}
 8004634:	f855 3b04 	ldr.w	r3, [r5], #4
 8004638:	4798      	blx	r3
 800463a:	3601      	adds	r6, #1
 800463c:	e7ee      	b.n	800461c <__libc_init_array+0xc>
 800463e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004642:	4798      	blx	r3
 8004644:	3601      	adds	r6, #1
 8004646:	e7f2      	b.n	800462e <__libc_init_array+0x1e>
 8004648:	080046a8 	.word	0x080046a8
 800464c:	080046a8 	.word	0x080046a8
 8004650:	080046a8 	.word	0x080046a8
 8004654:	080046ac 	.word	0x080046ac

08004658 <_init>:
 8004658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465a:	bf00      	nop
 800465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800465e:	bc08      	pop	{r3}
 8004660:	469e      	mov	lr, r3
 8004662:	4770      	bx	lr

08004664 <_fini>:
 8004664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004666:	bf00      	nop
 8004668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466a:	bc08      	pop	{r3}
 800466c:	469e      	mov	lr, r3
 800466e:	4770      	bx	lr
